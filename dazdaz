// ============================================================================
//
// Copyright (c) 2006-2015, Talend SA
//
// Ce code source a été automatiquement généré par_Talend Open Studio for Big Data
// / Soumis à la Licence Apache, Version 2.0 (la "Licence") ;
// votre utilisation de ce fichier doit respecter les termes de la Licence.
// Vous pouvez obtenir une copie de la Licence sur
// http://www.apache.org/licenses/LICENSE-2.0
//
// Sauf lorsqu'explicitement prévu par la loi en vigueur ou accepté par écrit, le logiciel
// distribué sous la Licence est distribué "TEL QUEL",
// SANS GARANTIE OU CONDITION D'AUCUNE SORTE, expresse ou implicite.
// Consultez la Licence pour connaître la terminologie spécifique régissant les autorisations et
// les limites prévues par la Licence.

package projet_synthese.job_fact_table_sales_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: Job_fact_table_sales Purpose: <br>
 * Description: <br>
 *
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status
 */
public class Job_fact_table_sales implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

		// if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if (NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "Job_fact_table_sales";
	private final String projectName = "PROJET_SYNTHESE";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	public void setDataSourceReferences(List serviceReferences) throws Exception {

		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();

		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils
				.getServices(serviceReferences, javax.sql.DataSource.class).entrySet()) {
			dataSources.put(entry.getKey(), entry.getValue());
			talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					Job_fact_table_sales.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(Job_fact_table_sales.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tDBInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUnite_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tReplicate_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_11_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBOutput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_order_access_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_order_mss_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_order_mys_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBOutput_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_PROJET_SYNTHESE_Job_fact_table_sales = new byte[0];
		static byte[] commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int dateID;

		public int getDateID() {
			return this.dateID;
		}

		public int produitSK;

		public int getProduitSK() {
			return this.produitSK;
		}

		public int customerSK;

		public int getCustomerSK() {
			return this.customerSK;
		}

		public BigDecimal saleAmount;

		public BigDecimal getSaleAmount() {
			return this.saleAmount;
		}

		public BigDecimal quantity;

		public BigDecimal getQuantity() {
			return this.quantity;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.dateID;

				result = prime * result + (int) this.produitSK;

				result = prime * result + (int) this.customerSK;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row6Struct other = (row6Struct) obj;

			if (this.dateID != other.dateID)
				return false;

			if (this.produitSK != other.produitSK)
				return false;

			if (this.customerSK != other.customerSK)
				return false;

			return true;
		}

		public void copyDataTo(row6Struct other) {

			other.dateID = this.dateID;
			other.produitSK = this.produitSK;
			other.customerSK = this.customerSK;
			other.saleAmount = this.saleAmount;
			other.quantity = this.quantity;

		}

		public void copyKeysDataTo(row6Struct other) {

			other.dateID = this.dateID;
			other.produitSK = this.produitSK;
			other.customerSK = this.customerSK;

		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_SYNTHESE_Job_fact_table_sales) {

				try {

					int length = 0;

					this.dateID = dis.readInt();

					this.produitSK = dis.readInt();

					this.customerSK = dis.readInt();

					this.saleAmount = (BigDecimal) dis.readObject();

					this.quantity = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_PROJET_SYNTHESE_Job_fact_table_sales) {

				try {

					int length = 0;

					this.dateID = dis.readInt();

					this.produitSK = dis.readInt();

					this.customerSK = dis.readInt();

					this.saleAmount = (BigDecimal) dis.readObject();

					this.quantity = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.dateID);

				// int

				dos.writeInt(this.produitSK);

				// int

				dos.writeInt(this.customerSK);

				// BigDecimal

				dos.writeObject(this.saleAmount);

				// BigDecimal

				dos.writeObject(this.quantity);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// int

				dos.writeInt(this.dateID);

				// int

				dos.writeInt(this.produitSK);

				// int

				dos.writeInt(this.customerSK);

				// BigDecimal

				dos.writeObject(this.saleAmount);

				// BigDecimal

				dos.writeObject(this.quantity);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("dateID=" + String.valueOf(dateID));
			sb.append(",produitSK=" + String.valueOf(produitSK));
			sb.append(",customerSK=" + String.valueOf(customerSK));
			sb.append(",saleAmount=" + String.valueOf(saleAmount));
			sb.append(",quantity=" + String.valueOf(quantity));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.dateID, other.dateID);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.produitSK, other.produitSK);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.customerSK, other.customerSK);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class factsalesStruct implements routines.system.IPersistableRow<factsalesStruct> {
		final static byte[] commonByteArrayLock_PROJET_SYNTHESE_Job_fact_table_sales = new byte[0];
		static byte[] commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int dateID;

		public int getDateID() {
			return this.dateID;
		}

		public int customerSK;

		public int getCustomerSK() {
			return this.customerSK;
		}

		public int produitSK;

		public int getProduitSK() {
			return this.produitSK;
		}

		public BigDecimal saleAmount;

		public BigDecimal getSaleAmount() {
			return this.saleAmount;
		}

		public BigDecimal quantity;

		public BigDecimal getQuantity() {
			return this.quantity;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.dateID;

				result = prime * result + (int) this.customerSK;

				result = prime * result + (int) this.produitSK;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final factsalesStruct other = (factsalesStruct) obj;

			if (this.dateID != other.dateID)
				return false;

			if (this.customerSK != other.customerSK)
				return false;

			if (this.produitSK != other.produitSK)
				return false;

			return true;
		}

		public void copyDataTo(factsalesStruct other) {

			other.dateID = this.dateID;
			other.customerSK = this.customerSK;
			other.produitSK = this.produitSK;
			other.saleAmount = this.saleAmount;
			other.quantity = this.quantity;

		}

		public void copyKeysDataTo(factsalesStruct other) {

			other.dateID = this.dateID;
			other.customerSK = this.customerSK;
			other.produitSK = this.produitSK;

		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_SYNTHESE_Job_fact_table_sales) {

				try {

					int length = 0;

					this.dateID = dis.readInt();

					this.customerSK = dis.readInt();

					this.produitSK = dis.readInt();

					this.saleAmount = (BigDecimal) dis.readObject();

					this.quantity = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_PROJET_SYNTHESE_Job_fact_table_sales) {

				try {

					int length = 0;

					this.dateID = dis.readInt();

					this.customerSK = dis.readInt();

					this.produitSK = dis.readInt();

					this.saleAmount = (BigDecimal) dis.readObject();

					this.quantity = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.dateID);

				// int

				dos.writeInt(this.customerSK);

				// int

				dos.writeInt(this.produitSK);

				// BigDecimal

				dos.writeObject(this.saleAmount);

				// BigDecimal

				dos.writeObject(this.quantity);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// int

				dos.writeInt(this.dateID);

				// int

				dos.writeInt(this.customerSK);

				// int

				dos.writeInt(this.produitSK);

				// BigDecimal

				dos.writeObject(this.saleAmount);

				// BigDecimal

				dos.writeObject(this.quantity);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("dateID=" + String.valueOf(dateID));
			sb.append(",customerSK=" + String.valueOf(customerSK));
			sb.append(",produitSK=" + String.valueOf(produitSK));
			sb.append(",saleAmount=" + String.valueOf(saleAmount));
			sb.append(",quantity=" + String.valueOf(quantity));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(factsalesStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.dateID, other.dateID);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.customerSK, other.customerSK);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.produitSK, other.produitSK);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_PROJET_SYNTHESE_Job_fact_table_sales = new byte[0];
		static byte[] commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales = new byte[0];

		public int dateID;

		public int getDateID() {
			return this.dateID;
		}

		public String customerCode;

		public String getCustomerCode() {
			return this.customerCode;
		}

		public String productCode;

		public String getProductCode() {
			return this.productCode;
		}

		public BigDecimal saleAmount;

		public BigDecimal getSaleAmount() {
			return this.saleAmount;
		}

		public BigDecimal quantity;

		public BigDecimal getQuantity() {
			return this.quantity;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales.length) {
					if (length < 1024 && commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales.length == 0) {
						commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales = new byte[1024];
					} else {
						commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales, 0, length);
				strReturn = new String(commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales.length) {
					if (length < 1024 && commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales.length == 0) {
						commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales = new byte[1024];
					} else {
						commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales, 0, length);
				strReturn = new String(commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_SYNTHESE_Job_fact_table_sales) {

				try {

					int length = 0;

					this.dateID = dis.readInt();

					this.customerCode = readString(dis);

					this.productCode = readString(dis);

					this.saleAmount = (BigDecimal) dis.readObject();

					this.quantity = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_PROJET_SYNTHESE_Job_fact_table_sales) {

				try {

					int length = 0;

					this.dateID = dis.readInt();

					this.customerCode = readString(dis);

					this.productCode = readString(dis);

					this.saleAmount = (BigDecimal) dis.readObject();

					this.quantity = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.dateID);

				// String

				writeString(this.customerCode, dos);

				// String

				writeString(this.productCode, dos);

				// BigDecimal

				dos.writeObject(this.saleAmount);

				// BigDecimal

				dos.writeObject(this.quantity);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// int

				dos.writeInt(this.dateID);

				// String

				writeString(this.customerCode, dos);

				// String

				writeString(this.productCode, dos);

				// BigDecimal

				dos.writeObject(this.saleAmount);

				// BigDecimal

				dos.writeObject(this.quantity);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("dateID=" + String.valueOf(dateID));
			sb.append(",customerCode=" + customerCode);
			sb.append(",productCode=" + productCode);
			sb.append(",saleAmount=" + String.valueOf(saleAmount));
			sb.append(",quantity=" + String.valueOf(quantity));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class measure_accStruct implements routines.system.IPersistableRow<measure_accStruct> {
		final static byte[] commonByteArrayLock_PROJET_SYNTHESE_Job_fact_table_sales = new byte[0];
		static byte[] commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales = new byte[0];

		public int dateID;

		public int getDateID() {
			return this.dateID;
		}

		public String customerCode;

		public String getCustomerCode() {
			return this.customerCode;
		}

		public String productCode;

		public String getProductCode() {
			return this.productCode;
		}

		public BigDecimal saleAmount;

		public BigDecimal getSaleAmount() {
			return this.saleAmount;
		}

		public BigDecimal quantity;

		public BigDecimal getQuantity() {
			return this.quantity;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales.length) {
					if (length < 1024 && commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales.length == 0) {
						commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales = new byte[1024];
					} else {
						commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales, 0, length);
				strReturn = new String(commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales.length) {
					if (length < 1024 && commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales.length == 0) {
						commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales = new byte[1024];
					} else {
						commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales, 0, length);
				strReturn = new String(commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_SYNTHESE_Job_fact_table_sales) {

				try {

					int length = 0;

					this.dateID = dis.readInt();

					this.customerCode = readString(dis);

					this.productCode = readString(dis);

					this.saleAmount = (BigDecimal) dis.readObject();

					this.quantity = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_PROJET_SYNTHESE_Job_fact_table_sales) {

				try {

					int length = 0;

					this.dateID = dis.readInt();

					this.customerCode = readString(dis);

					this.productCode = readString(dis);

					this.saleAmount = (BigDecimal) dis.readObject();

					this.quantity = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.dateID);

				// String

				writeString(this.customerCode, dos);

				// String

				writeString(this.productCode, dos);

				// BigDecimal

				dos.writeObject(this.saleAmount);

				// BigDecimal

				dos.writeObject(this.quantity);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// int

				dos.writeInt(this.dateID);

				// String

				writeString(this.customerCode, dos);

				// String

				writeString(this.productCode, dos);

				// BigDecimal

				dos.writeObject(this.saleAmount);

				// BigDecimal

				dos.writeObject(this.quantity);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("dateID=" + String.valueOf(dateID));
			sb.append(",customerCode=" + customerCode);
			sb.append(",productCode=" + productCode);
			sb.append(",saleAmount=" + String.valueOf(saleAmount));
			sb.append(",quantity=" + String.valueOf(quantity));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(measure_accStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class order_det_accessStruct implements routines.system.IPersistableRow<order_det_accessStruct> {
		final static byte[] commonByteArrayLock_PROJET_SYNTHESE_Job_fact_table_sales = new byte[0];
		static byte[] commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales = new byte[0];

		public Long ID;

		public Long getID() {
			return this.ID;
		}

		public long ORDER_ID;

		public long getORDER_ID() {
			return this.ORDER_ID;
		}

		public Long PRODUCT_ID;

		public Long getPRODUCT_ID() {
			return this.PRODUCT_ID;
		}

		public BigDecimal QUANTITY;

		public BigDecimal getQUANTITY() {
			return this.QUANTITY;
		}

		public BigDecimal UNIT_PRICE;

		public BigDecimal getUNIT_PRICE() {
			return this.UNIT_PRICE;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_SYNTHESE_Job_fact_table_sales) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.ID = null;
					} else {
						this.ID = dis.readLong();
					}

					this.ORDER_ID = dis.readLong();

					length = dis.readByte();
					if (length == -1) {
						this.PRODUCT_ID = null;
					} else {
						this.PRODUCT_ID = dis.readLong();
					}

					this.QUANTITY = (BigDecimal) dis.readObject();

					this.UNIT_PRICE = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_PROJET_SYNTHESE_Job_fact_table_sales) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.ID = null;
					} else {
						this.ID = dis.readLong();
					}

					this.ORDER_ID = dis.readLong();

					length = dis.readByte();
					if (length == -1) {
						this.PRODUCT_ID = null;
					} else {
						this.PRODUCT_ID = dis.readLong();
					}

					this.QUANTITY = (BigDecimal) dis.readObject();

					this.UNIT_PRICE = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.ID);
				}

				// long

				dos.writeLong(this.ORDER_ID);

				// Long

				if (this.PRODUCT_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.PRODUCT_ID);
				}

				// BigDecimal

				dos.writeObject(this.QUANTITY);

				// BigDecimal

				dos.writeObject(this.UNIT_PRICE);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Long

				if (this.ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.ID);
				}

				// long

				dos.writeLong(this.ORDER_ID);

				// Long

				if (this.PRODUCT_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.PRODUCT_ID);
				}

				// BigDecimal

				dos.writeObject(this.QUANTITY);

				// BigDecimal

				dos.writeObject(this.UNIT_PRICE);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",ORDER_ID=" + String.valueOf(ORDER_ID));
			sb.append(",PRODUCT_ID=" + String.valueOf(PRODUCT_ID));
			sb.append(",QUANTITY=" + String.valueOf(QUANTITY));
			sb.append(",UNIT_PRICE=" + String.valueOf(UNIT_PRICE));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(order_det_accessStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tDBInput_1Struct implements routines.system.IPersistableRow<after_tDBInput_1Struct> {
		final static byte[] commonByteArrayLock_PROJET_SYNTHESE_Job_fact_table_sales = new byte[0];
		static byte[] commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Long ID;

		public Long getID() {
			return this.ID;
		}

		public long ORDER_ID;

		public long getORDER_ID() {
			return this.ORDER_ID;
		}

		public Long PRODUCT_ID;

		public Long getPRODUCT_ID() {
			return this.PRODUCT_ID;
		}

		public BigDecimal QUANTITY;

		public BigDecimal getQUANTITY() {
			return this.QUANTITY;
		}

		public BigDecimal UNIT_PRICE;

		public BigDecimal getUNIT_PRICE() {
			return this.UNIT_PRICE;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tDBInput_1Struct other = (after_tDBInput_1Struct) obj;

			if (this.ID == null) {
				if (other.ID != null)
					return false;

			} else if (!this.ID.equals(other.ID))

				return false;

			return true;
		}

		public void copyDataTo(after_tDBInput_1Struct other) {

			other.ID = this.ID;
			other.ORDER_ID = this.ORDER_ID;
			other.PRODUCT_ID = this.PRODUCT_ID;
			other.QUANTITY = this.QUANTITY;
			other.UNIT_PRICE = this.UNIT_PRICE;

		}

		public void copyKeysDataTo(after_tDBInput_1Struct other) {

			other.ID = this.ID;

		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_SYNTHESE_Job_fact_table_sales) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.ID = null;
					} else {
						this.ID = dis.readLong();
					}

					this.ORDER_ID = dis.readLong();

					length = dis.readByte();
					if (length == -1) {
						this.PRODUCT_ID = null;
					} else {
						this.PRODUCT_ID = dis.readLong();
					}

					this.QUANTITY = (BigDecimal) dis.readObject();

					this.UNIT_PRICE = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_PROJET_SYNTHESE_Job_fact_table_sales) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.ID = null;
					} else {
						this.ID = dis.readLong();
					}

					this.ORDER_ID = dis.readLong();

					length = dis.readByte();
					if (length == -1) {
						this.PRODUCT_ID = null;
					} else {
						this.PRODUCT_ID = dis.readLong();
					}

					this.QUANTITY = (BigDecimal) dis.readObject();

					this.UNIT_PRICE = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.ID);
				}

				// long

				dos.writeLong(this.ORDER_ID);

				// Long

				if (this.PRODUCT_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.PRODUCT_ID);
				}

				// BigDecimal

				dos.writeObject(this.QUANTITY);

				// BigDecimal

				dos.writeObject(this.UNIT_PRICE);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Long

				if (this.ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.ID);
				}

				// long

				dos.writeLong(this.ORDER_ID);

				// Long

				if (this.PRODUCT_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.PRODUCT_ID);
				}

				// BigDecimal

				dos.writeObject(this.QUANTITY);

				// BigDecimal

				dos.writeObject(this.UNIT_PRICE);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",ORDER_ID=" + String.valueOf(ORDER_ID));
			sb.append(",PRODUCT_ID=" + String.valueOf(PRODUCT_ID));
			sb.append(",QUANTITY=" + String.valueOf(QUANTITY));
			sb.append(",UNIT_PRICE=" + String.valueOf(UNIT_PRICE));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tDBInput_1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID, other.ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class measure_mysStruct implements routines.system.IPersistableRow<measure_mysStruct> {
		final static byte[] commonByteArrayLock_PROJET_SYNTHESE_Job_fact_table_sales = new byte[0];
		static byte[] commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales = new byte[0];

		public int DateID;

		public int getDateID() {
			return this.DateID;
		}

		public String customerCode;

		public String getCustomerCode() {
			return this.customerCode;
		}

		public String productCode;

		public String getProductCode() {
			return this.productCode;
		}

		public BigDecimal salesAmount;

		public BigDecimal getSalesAmount() {
			return this.salesAmount;
		}

		public BigDecimal quantity;

		public BigDecimal getQuantity() {
			return this.quantity;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales.length) {
					if (length < 1024 && commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales.length == 0) {
						commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales = new byte[1024];
					} else {
						commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales, 0, length);
				strReturn = new String(commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales.length) {
					if (length < 1024 && commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales.length == 0) {
						commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales = new byte[1024];
					} else {
						commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales, 0, length);
				strReturn = new String(commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_SYNTHESE_Job_fact_table_sales) {

				try {

					int length = 0;

					this.DateID = dis.readInt();

					this.customerCode = readString(dis);

					this.productCode = readString(dis);

					this.salesAmount = (BigDecimal) dis.readObject();

					this.quantity = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_PROJET_SYNTHESE_Job_fact_table_sales) {

				try {

					int length = 0;

					this.DateID = dis.readInt();

					this.customerCode = readString(dis);

					this.productCode = readString(dis);

					this.salesAmount = (BigDecimal) dis.readObject();

					this.quantity = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.DateID);

				// String

				writeString(this.customerCode, dos);

				// String

				writeString(this.productCode, dos);

				// BigDecimal

				dos.writeObject(this.salesAmount);

				// BigDecimal

				dos.writeObject(this.quantity);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// int

				dos.writeInt(this.DateID);

				// String

				writeString(this.customerCode, dos);

				// String

				writeString(this.productCode, dos);

				// BigDecimal

				dos.writeObject(this.salesAmount);

				// BigDecimal

				dos.writeObject(this.quantity);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("DateID=" + String.valueOf(DateID));
			sb.append(",customerCode=" + customerCode);
			sb.append(",productCode=" + productCode);
			sb.append(",salesAmount=" + String.valueOf(salesAmount));
			sb.append(",quantity=" + String.valueOf(quantity));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(measure_mysStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class order_det_mysStruct implements routines.system.IPersistableRow<order_det_mysStruct> {
		final static byte[] commonByteArrayLock_PROJET_SYNTHESE_Job_fact_table_sales = new byte[0];
		static byte[] commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales = new byte[0];

		public int orderNumber;

		public int getOrderNumber() {
			return this.orderNumber;
		}

		public String productCode;

		public String getProductCode() {
			return this.productCode;
		}

		public int quantityOrdered;

		public int getQuantityOrdered() {
			return this.quantityOrdered;
		}

		public BigDecimal priceEach;

		public BigDecimal getPriceEach() {
			return this.priceEach;
		}

		public short orderLineNumber;

		public short getOrderLineNumber() {
			return this.orderLineNumber;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales.length) {
					if (length < 1024 && commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales.length == 0) {
						commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales = new byte[1024];
					} else {
						commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales, 0, length);
				strReturn = new String(commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales.length) {
					if (length < 1024 && commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales.length == 0) {
						commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales = new byte[1024];
					} else {
						commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales, 0, length);
				strReturn = new String(commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_SYNTHESE_Job_fact_table_sales) {

				try {

					int length = 0;

					this.orderNumber = dis.readInt();

					this.productCode = readString(dis);

					this.quantityOrdered = dis.readInt();

					this.priceEach = (BigDecimal) dis.readObject();

					this.orderLineNumber = dis.readShort();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_PROJET_SYNTHESE_Job_fact_table_sales) {

				try {

					int length = 0;

					this.orderNumber = dis.readInt();

					this.productCode = readString(dis);

					this.quantityOrdered = dis.readInt();

					this.priceEach = (BigDecimal) dis.readObject();

					this.orderLineNumber = dis.readShort();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.orderNumber);

				// String

				writeString(this.productCode, dos);

				// int

				dos.writeInt(this.quantityOrdered);

				// BigDecimal

				dos.writeObject(this.priceEach);

				// short

				dos.writeShort(this.orderLineNumber);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// int

				dos.writeInt(this.orderNumber);

				// String

				writeString(this.productCode, dos);

				// int

				dos.writeInt(this.quantityOrdered);

				// BigDecimal

				dos.writeObject(this.priceEach);

				// short

				dos.writeShort(this.orderLineNumber);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("orderNumber=" + String.valueOf(orderNumber));
			sb.append(",productCode=" + productCode);
			sb.append(",quantityOrdered=" + String.valueOf(quantityOrdered));
			sb.append(",priceEach=" + String.valueOf(priceEach));
			sb.append(",orderLineNumber=" + String.valueOf(orderLineNumber));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(order_det_mysStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tDBInput_4Struct implements routines.system.IPersistableRow<after_tDBInput_4Struct> {
		final static byte[] commonByteArrayLock_PROJET_SYNTHESE_Job_fact_table_sales = new byte[0];
		static byte[] commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int orderNumber;

		public int getOrderNumber() {
			return this.orderNumber;
		}

		public String productCode;

		public String getProductCode() {
			return this.productCode;
		}

		public int quantityOrdered;

		public int getQuantityOrdered() {
			return this.quantityOrdered;
		}

		public BigDecimal priceEach;

		public BigDecimal getPriceEach() {
			return this.priceEach;
		}

		public short orderLineNumber;

		public short getOrderLineNumber() {
			return this.orderLineNumber;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.orderNumber;

				result = prime * result + ((this.productCode == null) ? 0 : this.productCode.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tDBInput_4Struct other = (after_tDBInput_4Struct) obj;

			if (this.orderNumber != other.orderNumber)
				return false;

			if (this.productCode == null) {
				if (other.productCode != null)
					return false;

			} else if (!this.productCode.equals(other.productCode))

				return false;

			return true;
		}

		public void copyDataTo(after_tDBInput_4Struct other) {

			other.orderNumber = this.orderNumber;
			other.productCode = this.productCode;
			other.quantityOrdered = this.quantityOrdered;
			other.priceEach = this.priceEach;
			other.orderLineNumber = this.orderLineNumber;

		}

		public void copyKeysDataTo(after_tDBInput_4Struct other) {

			other.orderNumber = this.orderNumber;
			other.productCode = this.productCode;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales.length) {
					if (length < 1024 && commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales.length == 0) {
						commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales = new byte[1024];
					} else {
						commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales, 0, length);
				strReturn = new String(commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales.length) {
					if (length < 1024 && commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales.length == 0) {
						commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales = new byte[1024];
					} else {
						commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales, 0, length);
				strReturn = new String(commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_SYNTHESE_Job_fact_table_sales) {

				try {

					int length = 0;

					this.orderNumber = dis.readInt();

					this.productCode = readString(dis);

					this.quantityOrdered = dis.readInt();

					this.priceEach = (BigDecimal) dis.readObject();

					this.orderLineNumber = dis.readShort();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_PROJET_SYNTHESE_Job_fact_table_sales) {

				try {

					int length = 0;

					this.orderNumber = dis.readInt();

					this.productCode = readString(dis);

					this.quantityOrdered = dis.readInt();

					this.priceEach = (BigDecimal) dis.readObject();

					this.orderLineNumber = dis.readShort();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.orderNumber);

				// String

				writeString(this.productCode, dos);

				// int

				dos.writeInt(this.quantityOrdered);

				// BigDecimal

				dos.writeObject(this.priceEach);

				// short

				dos.writeShort(this.orderLineNumber);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// int

				dos.writeInt(this.orderNumber);

				// String

				writeString(this.productCode, dos);

				// int

				dos.writeInt(this.quantityOrdered);

				// BigDecimal

				dos.writeObject(this.priceEach);

				// short

				dos.writeShort(this.orderLineNumber);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("orderNumber=" + String.valueOf(orderNumber));
			sb.append(",productCode=" + productCode);
			sb.append(",quantityOrdered=" + String.valueOf(quantityOrdered));
			sb.append(",priceEach=" + String.valueOf(priceEach));
			sb.append(",orderLineNumber=" + String.valueOf(orderLineNumber));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tDBInput_4Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.orderNumber, other.orderNumber);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.productCode, other.productCode);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class measure_mssStruct implements routines.system.IPersistableRow<measure_mssStruct> {
		final static byte[] commonByteArrayLock_PROJET_SYNTHESE_Job_fact_table_sales = new byte[0];
		static byte[] commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales = new byte[0];

		public int OrderDate;

		public int getOrderDate() {
			return this.OrderDate;
		}

		public String customCode;

		public String getCustomCode() {
			return this.customCode;
		}

		public String productCode;

		public String getProductCode() {
			return this.productCode;
		}

		public BigDecimal saleAmount;

		public BigDecimal getSaleAmount() {
			return this.saleAmount;
		}

		public BigDecimal quantity;

		public BigDecimal getQuantity() {
			return this.quantity;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales.length) {
					if (length < 1024 && commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales.length == 0) {
						commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales = new byte[1024];
					} else {
						commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales, 0, length);
				strReturn = new String(commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales.length) {
					if (length < 1024 && commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales.length == 0) {
						commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales = new byte[1024];
					} else {
						commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales, 0, length);
				strReturn = new String(commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_SYNTHESE_Job_fact_table_sales) {

				try {

					int length = 0;

					this.OrderDate = dis.readInt();

					this.customCode = readString(dis);

					this.productCode = readString(dis);

					this.saleAmount = (BigDecimal) dis.readObject();

					this.quantity = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_PROJET_SYNTHESE_Job_fact_table_sales) {

				try {

					int length = 0;

					this.OrderDate = dis.readInt();

					this.customCode = readString(dis);

					this.productCode = readString(dis);

					this.saleAmount = (BigDecimal) dis.readObject();

					this.quantity = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.OrderDate);

				// String

				writeString(this.customCode, dos);

				// String

				writeString(this.productCode, dos);

				// BigDecimal

				dos.writeObject(this.saleAmount);

				// BigDecimal

				dos.writeObject(this.quantity);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// int

				dos.writeInt(this.OrderDate);

				// String

				writeString(this.customCode, dos);

				// String

				writeString(this.productCode, dos);

				// BigDecimal

				dos.writeObject(this.saleAmount);

				// BigDecimal

				dos.writeObject(this.quantity);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrderDate=" + String.valueOf(OrderDate));
			sb.append(",customCode=" + customCode);
			sb.append(",productCode=" + productCode);
			sb.append(",saleAmount=" + String.valueOf(saleAmount));
			sb.append(",quantity=" + String.valueOf(quantity));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(measure_mssStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class order_det_mssStruct implements routines.system.IPersistableRow<order_det_mssStruct> {
		final static byte[] commonByteArrayLock_PROJET_SYNTHESE_Job_fact_table_sales = new byte[0];
		static byte[] commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales = new byte[0];

		public int OrderID;

		public int getOrderID() {
			return this.OrderID;
		}

		public int ProductID;

		public int getProductID() {
			return this.ProductID;
		}

		public BigDecimal UnitPrice;

		public BigDecimal getUnitPrice() {
			return this.UnitPrice;
		}

		public short Quantity;

		public short getQuantity() {
			return this.Quantity;
		}

		public float Discount;

		public float getDiscount() {
			return this.Discount;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_SYNTHESE_Job_fact_table_sales) {

				try {

					int length = 0;

					this.OrderID = dis.readInt();

					this.ProductID = dis.readInt();

					this.UnitPrice = (BigDecimal) dis.readObject();

					this.Quantity = dis.readShort();

					this.Discount = dis.readFloat();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_PROJET_SYNTHESE_Job_fact_table_sales) {

				try {

					int length = 0;

					this.OrderID = dis.readInt();

					this.ProductID = dis.readInt();

					this.UnitPrice = (BigDecimal) dis.readObject();

					this.Quantity = dis.readShort();

					this.Discount = dis.readFloat();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.OrderID);

				// int

				dos.writeInt(this.ProductID);

				// BigDecimal

				dos.writeObject(this.UnitPrice);

				// short

				dos.writeShort(this.Quantity);

				// float

				dos.writeFloat(this.Discount);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// int

				dos.writeInt(this.OrderID);

				// int

				dos.writeInt(this.ProductID);

				// BigDecimal

				dos.writeObject(this.UnitPrice);

				// short

				dos.writeShort(this.Quantity);

				// float

				dos.writeFloat(this.Discount);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrderID=" + String.valueOf(OrderID));
			sb.append(",ProductID=" + String.valueOf(ProductID));
			sb.append(",UnitPrice=" + String.valueOf(UnitPrice));
			sb.append(",Quantity=" + String.valueOf(Quantity));
			sb.append(",Discount=" + String.valueOf(Discount));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(order_det_mssStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tDBInput_7Struct implements routines.system.IPersistableRow<after_tDBInput_7Struct> {
		final static byte[] commonByteArrayLock_PROJET_SYNTHESE_Job_fact_table_sales = new byte[0];
		static byte[] commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int OrderID;

		public int getOrderID() {
			return this.OrderID;
		}

		public int ProductID;

		public int getProductID() {
			return this.ProductID;
		}

		public BigDecimal UnitPrice;

		public BigDecimal getUnitPrice() {
			return this.UnitPrice;
		}

		public short Quantity;

		public short getQuantity() {
			return this.Quantity;
		}

		public float Discount;

		public float getDiscount() {
			return this.Discount;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.OrderID;

				result = prime * result + (int) this.ProductID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tDBInput_7Struct other = (after_tDBInput_7Struct) obj;

			if (this.OrderID != other.OrderID)
				return false;

			if (this.ProductID != other.ProductID)
				return false;

			return true;
		}

		public void copyDataTo(after_tDBInput_7Struct other) {

			other.OrderID = this.OrderID;
			other.ProductID = this.ProductID;
			other.UnitPrice = this.UnitPrice;
			other.Quantity = this.Quantity;
			other.Discount = this.Discount;

		}

		public void copyKeysDataTo(after_tDBInput_7Struct other) {

			other.OrderID = this.OrderID;
			other.ProductID = this.ProductID;

		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_SYNTHESE_Job_fact_table_sales) {

				try {

					int length = 0;

					this.OrderID = dis.readInt();

					this.ProductID = dis.readInt();

					this.UnitPrice = (BigDecimal) dis.readObject();

					this.Quantity = dis.readShort();

					this.Discount = dis.readFloat();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_PROJET_SYNTHESE_Job_fact_table_sales) {

				try {

					int length = 0;

					this.OrderID = dis.readInt();

					this.ProductID = dis.readInt();

					this.UnitPrice = (BigDecimal) dis.readObject();

					this.Quantity = dis.readShort();

					this.Discount = dis.readFloat();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.OrderID);

				// int

				dos.writeInt(this.ProductID);

				// BigDecimal

				dos.writeObject(this.UnitPrice);

				// short

				dos.writeShort(this.Quantity);

				// float

				dos.writeFloat(this.Discount);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// int

				dos.writeInt(this.OrderID);

				// int

				dos.writeInt(this.ProductID);

				// BigDecimal

				dos.writeObject(this.UnitPrice);

				// short

				dos.writeShort(this.Quantity);

				// float

				dos.writeFloat(this.Discount);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrderID=" + String.valueOf(OrderID));
			sb.append(",ProductID=" + String.valueOf(ProductID));
			sb.append(",UnitPrice=" + String.valueOf(UnitPrice));
			sb.append(",Quantity=" + String.valueOf(Quantity));
			sb.append(",Discount=" + String.valueOf(Discount));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tDBInput_7Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.OrderID, other.OrderID);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.ProductID, other.ProductID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tDBInput_2Process(globalMap);
				tDBInput_3Process(globalMap);
				tDBInput_6Process(globalMap);
				tDBInput_8Process(globalMap);
				tDBInput_11Process(globalMap);
				tDBInput_9Process(globalMap);

				order_det_accessStruct order_det_access = new order_det_accessStruct();
				measure_accStruct measure_acc = new measure_accStruct();

				order_det_mssStruct order_det_mss = new order_det_mssStruct();
				measure_mssStruct measure_mss = new measure_mssStruct();

				order_det_mysStruct order_det_mys = new order_det_mysStruct();
				measure_mysStruct measure_mys = new measure_mysStruct();

				row1Struct row1 = new row1Struct();
				factsalesStruct factsales = new factsalesStruct();
				row6Struct row6 = new row6Struct();

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());

				currentComponent = "tLogRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row6");
				}

				int tos_count_tLogRow_1 = 0;

				///////////////////////

				class Util_tLogRow_1 {

					String[] des_top = { ".", ".", "-", "+" };

					String[] des_head = { "|=", "=|", "-", "+" };

					String[] des_bottom = { "'", "'", "-", "+" };

					String name = "";

					java.util.List<String[]> list = new java.util.ArrayList<String[]>();

					int[] colLengths = new int[5];

					public void addRow(String[] row) {

						for (int i = 0; i < 5; i++) {
							if (row[i] != null) {
								colLengths[i] = Math.max(colLengths[i], row[i].length());
							}
						}
						list.add(row);
					}

					public void setTableName(String name) {

						this.name = name;
					}

					public StringBuilder format() {

						StringBuilder sb = new StringBuilder();

						sb.append(print(des_top));

						int totals = 0;
						for (int i = 0; i < colLengths.length; i++) {
							totals = totals + colLengths[i];
						}

						// name
						sb.append("|");
						int k = 0;
						for (k = 0; k < (totals + 4 - name.length()) / 2; k++) {
							sb.append(' ');
						}
						sb.append(name);
						for (int i = 0; i < totals + 4 - name.length() - k; i++) {
							sb.append(' ');
						}
						sb.append("|\n");

						// head and rows
						sb.append(print(des_head));
						for (int i = 0; i < list.size(); i++) {

							String[] row = list.get(i);

							java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());

							StringBuilder sbformat = new StringBuilder();
							sbformat.append("|%1$-");
							sbformat.append(colLengths[0]);
							sbformat.append("s");

							sbformat.append("|%2$-");
							sbformat.append(colLengths[1]);
							sbformat.append("s");

							sbformat.append("|%3$-");
							sbformat.append(colLengths[2]);
							sbformat.append("s");

							sbformat.append("|%4$-");
							sbformat.append(colLengths[3]);
							sbformat.append("s");

							sbformat.append("|%5$-");
							sbformat.append(colLengths[4]);
							sbformat.append("s");

							sbformat.append("|\n");

							formatter.format(sbformat.toString(), (Object[]) row);

							sb.append(formatter.toString());
							if (i == 0)
								sb.append(print(des_head)); // print the head
						}

						// end
						sb.append(print(des_bottom));
						return sb;
					}

					private StringBuilder print(String[] fillChars) {
						StringBuilder sb = new StringBuilder();
						// first column
						sb.append(fillChars[0]);
						for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						// last column
						for (int i = 0; i < colLengths[4] - fillChars[1].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[1]);
						sb.append("\n");
						return sb;
					}

					public boolean isTableEmpty() {
						if (list.size() > 1)
							return false;
						return true;
					}
				}
				Util_tLogRow_1 util_tLogRow_1 = new Util_tLogRow_1();
				util_tLogRow_1.setTableName("tLogRow_1");
				util_tLogRow_1.addRow(new String[] { "dateID", "produitSK", "customerSK", "saleAmount", "quantity", });
				StringBuilder strBuffer_tLogRow_1 = null;
				int nb_line_tLogRow_1 = 0;
///////////////////////

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tReplicate_1 begin ] start
				 */

				ok_Hash.put("tReplicate_1", false);
				start_Hash.put("tReplicate_1", System.currentTimeMillis());

				currentComponent = "tReplicate_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "factsales");
				}

				int tos_count_tReplicate_1 = 0;

				/**
				 * [tReplicate_1 begin ] stop
				 */

				/**
				 * [tMap_4 begin ] start
				 */

				ok_Hash.put("tMap_4", false);
				start_Hash.put("tMap_4", System.currentTimeMillis());

				currentComponent = "tMap_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tMap_4 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) globalMap
						.get("tHash_Lookup_row2"));

				row2Struct row2HashKey = new row2Struct();
				row2Struct row2Default = new row2Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) globalMap
						.get("tHash_Lookup_row3"));

				row3Struct row3HashKey = new row3Struct();
				row3Struct row3Default = new row3Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) globalMap
						.get("tHash_Lookup_row4"));

				row4Struct row4HashKey = new row4Struct();
				row4Struct row4Default = new row4Struct();
// ###############################

// ###############################
// # Vars initialization
				class Var__tMap_4__Struct {
				}
				Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
				factsalesStruct factsales_tmp = new factsalesStruct();
// ###############################

				/**
				 * [tMap_4 begin ] stop
				 */

				/**
				 * [tUnite_1 begin ] start
				 */

				ok_Hash.put("tUnite_1", false);
				start_Hash.put("tUnite_1", System.currentTimeMillis());

				currentComponent = "tUnite_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "measure_mss", "measure_acc",
							"measure_mys");
				}

				int tos_count_tUnite_1 = 0;

				int nb_line_tUnite_1 = 0;

				/**
				 * [tUnite_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "order_det_access");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<order_accessStruct> tHash_Lookup_order_access = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<order_accessStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<order_accessStruct>) globalMap
						.get("tHash_Lookup_order_access"));

				order_accessStruct order_accessHashKey = new order_accessStruct();
				order_accessStruct order_accessDefault = new order_accessStruct();
// ###############################

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				measure_accStruct measure_acc_tmp = new measure_accStruct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tDBInput_1 begin ] start
				 */

				ok_Hash.put("tDBInput_1", false);
				start_Hash.put("tDBInput_1", System.currentTimeMillis());

				currentComponent = "tDBInput_1";

				int tos_count_tDBInput_1 = 0;

				int nb_line_tDBInput_1 = 0;
				java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "net.ucanaccess.jdbc.UcanaccessDriver";
				java.lang.Class.forName(driverClass_tDBInput_1);

				String url_tDBInput_1 = "jdbc:ucanaccess://" + "C:/Users/dell/Downloads/northwind.accdb"
						+ ";jackcessOpener=org.talend.ucanaccess.encrypt.CryptCodecOpener;singleConnection=true";
				String dbUser_tDBInput_1 = "";

				final String decryptedPassword_tDBInput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:Bl/FwEKqKmTiMTjU89kG+G19tHPh+kYFoRtykQ==");

				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;

				String atnParams_tDBInput_1 = "jackcessOpener=org.talend.ucanaccess.encrypt.CryptCodecOpener;memory=false";
				atnParams_tDBInput_1 = atnParams_tDBInput_1.replaceAll("&", "\n");
				java.util.Properties atnParamsPrope_tDBInput_1 = new java.util.Properties();
				atnParamsPrope_tDBInput_1.put("user", dbUser_tDBInput_1);
				atnParamsPrope_tDBInput_1.put("password", dbPwd_tDBInput_1);
				atnParamsPrope_tDBInput_1.load(new java.io.ByteArrayInputStream(atnParams_tDBInput_1.getBytes()));
				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1, atnParamsPrope_tDBInput_1);

				java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

				String dbquery_tDBInput_1 = "SELECT \n  [ORDER DETAILS].[ID], \n  [ORDER DETAILS].[ORDER ID], \n  [ORDER DETAILS].[PRODUCT ID], \n  [ORDER DETAILS].QUAN"
						+ "TITY, \n  [ORDER DETAILS].[UNIT PRICE], \n  [ORDER DETAILS].DISCOUNT, \n  [ORDER DETAILS].[STATUS ID], \n  [ORDER DETAILS].["
						+ "DATE ALLOCATED], \n  [ORDER DETAILS].[PURCHASE ORDER ID], \n  [ORDER DETAILS].[INVENTORY ID]\nFROM [ORDER DETAILS]";

				globalMap.put("tDBInput_1_QUERY", dbquery_tDBInput_1);
				java.sql.ResultSet rs_tDBInput_1 = null;

				try {
					rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
					java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
					int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

					String tmpContent_tDBInput_1 = null;

					while (rs_tDBInput_1.next()) {
						nb_line_tDBInput_1++;

						if (colQtyInRs_tDBInput_1 < 1) {
							order_det_access.ID = null;
						} else {

							order_det_access.ID = rs_tDBInput_1.getLong(1);
							if (rs_tDBInput_1.wasNull()) {
								order_det_access.ID = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 2) {
							order_det_access.ORDER_ID = 0;
						} else {

							order_det_access.ORDER_ID = rs_tDBInput_1.getLong(2);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 3) {
							order_det_access.PRODUCT_ID = null;
						} else {

							order_det_access.PRODUCT_ID = rs_tDBInput_1.getLong(3);
							if (rs_tDBInput_1.wasNull()) {
								order_det_access.PRODUCT_ID = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 4) {
							order_det_access.QUANTITY = null;
						} else {

							order_det_access.QUANTITY = rs_tDBInput_1.getBigDecimal(4);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 5) {
							order_det_access.UNIT_PRICE = null;
						} else {

							order_det_access.UNIT_PRICE = rs_tDBInput_1.getBigDecimal(5);
							if (rs_tDBInput_1.wasNull()) {
								order_det_access.UNIT_PRICE = null;
							}
						}

						/**
						 * [tDBInput_1 begin ] stop
						 */

						/**
						 * [tDBInput_1 main ] start
						 */

						currentComponent = "tDBInput_1";

						tos_count_tDBInput_1++;

						/**
						 * [tDBInput_1 main ] stop
						 */

						/**
						 * [tDBInput_1 process_data_begin ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_begin ] stop
						 */

						/**
						 * [tMap_1 main ] start
						 */

						currentComponent = "tMap_1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "order_det_access"

							);
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_1 = false;
						boolean mainRowRejected_tMap_1 = false;

						///////////////////////////////////////////////
						// Starting Lookup Table "order_access"
						///////////////////////////////////////////////

						boolean forceLooporder_access = false;

						order_accessStruct order_accessObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1 = false;

							order_accessHashKey.ORDER_ID = order_det_access.ORDER_ID;

							order_accessHashKey.hashCodeDirty = true;

							tHash_Lookup_order_access.lookup(order_accessHashKey);

						} // G_TM_M_020

						if (tHash_Lookup_order_access != null
								&& tHash_Lookup_order_access.getCount(order_accessHashKey) > 1) { // G 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
							// 'order_access' and it contains more one result from keys :
							// order_access.ORDER_ID = '" + order_accessHashKey.ORDER_ID + "'");
						} // G 071

						order_accessStruct order_access = null;

						order_accessStruct fromLookup_order_access = null;
						order_access = order_accessDefault;

						if (tHash_Lookup_order_access != null && tHash_Lookup_order_access.hasNext()) { // G 099

							fromLookup_order_access = tHash_Lookup_order_access.next();

						} // G 099

						if (fromLookup_order_access != null) {
							order_access = fromLookup_order_access;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
							// ###############################
							// # Output tables

							measure_acc = null;

// # Output table : 'measure_acc'
							measure_acc_tmp.dateID = Integer
									.parseInt(TalendDate.formatDateInUTC("yyyyMMdd", order_access.ORDER_DATE));
							measure_acc_tmp.customerCode = "" + order_access.CUSTOMER_ID + "_access";
							measure_acc_tmp.productCode = order_det_access.PRODUCT_ID.toString() + "_access";
							measure_acc_tmp.saleAmount = order_det_access.UNIT_PRICE
									.multiply(order_det_access.QUANTITY);
							measure_acc_tmp.quantity = order_det_access.QUANTITY;
							measure_acc = measure_acc_tmp;
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_1 = false;

						tos_count_tMap_1++;

						/**
						 * [tMap_1 main ] stop
						 */

						/**
						 * [tMap_1 process_data_begin ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_begin ] stop
						 */
// Start of branch "measure_acc"
						if (measure_acc != null) {

							/**
							 * [tUnite_1 main ] start
							 */

							currentComponent = "tUnite_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "measure_acc"

								);
							}

//////////

// for output
							row1 = new row1Struct();

							row1.dateID = measure_acc.dateID;
							row1.customerCode = measure_acc.customerCode;
							row1.productCode = measure_acc.productCode;
							row1.saleAmount = measure_acc.saleAmount;
							row1.quantity = measure_acc.quantity;

							nb_line_tUnite_1++;

//////////

							tos_count_tUnite_1++;

							/**
							 * [tUnite_1 main ] stop
							 */

							/**
							 * [tUnite_1 process_data_begin ] start
							 */

							currentComponent = "tUnite_1";

							/**
							 * [tUnite_1 process_data_begin ] stop
							 */

							/**
							 * [tMap_4 main ] start
							 */

							currentComponent = "tMap_4";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "row1"

								);
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_4 = false;
							boolean mainRowRejected_tMap_4 = false;

							///////////////////////////////////////////////
							// Starting Lookup Table "row2"
							///////////////////////////////////////////////

							boolean forceLooprow2 = false;

							row2Struct row2ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_4 = false;

								row2HashKey.customerNumber = row1.customerCode;

								row2HashKey.hashCodeDirty = true;

								tHash_Lookup_row2.lookup(row2HashKey);

							} // G_TM_M_020

							if (tHash_Lookup_row2 != null && tHash_Lookup_row2.getCount(row2HashKey) > 1) { // G 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row2'
								// and it contains more one result from keys : row2.customerNumber = '" +
								// row2HashKey.customerNumber + "'");
							} // G 071

							row2Struct row2 = null;

							row2Struct fromLookup_row2 = null;
							row2 = row2Default;

							if (tHash_Lookup_row2 != null && tHash_Lookup_row2.hasNext()) { // G 099

								fromLookup_row2 = tHash_Lookup_row2.next();

							} // G 099

							if (fromLookup_row2 != null) {
								row2 = fromLookup_row2;
							}

							///////////////////////////////////////////////
							// Starting Lookup Table "row3"
							///////////////////////////////////////////////

							boolean forceLooprow3 = false;

							row3Struct row3ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_4 = false;

								row3HashKey.ID = row1.productCode;

								row3HashKey.hashCodeDirty = true;

								tHash_Lookup_row3.lookup(row3HashKey);

							} // G_TM_M_020

							if (tHash_Lookup_row3 != null && tHash_Lookup_row3.getCount(row3HashKey) > 1) { // G 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row3'
								// and it contains more one result from keys : row3.ID = '" + row3HashKey.ID +
								// "'");
							} // G 071

							row3Struct row3 = null;

							row3Struct fromLookup_row3 = null;
							row3 = row3Default;

							if (tHash_Lookup_row3 != null && tHash_Lookup_row3.hasNext()) { // G 099

								fromLookup_row3 = tHash_Lookup_row3.next();

							} // G 099

							if (fromLookup_row3 != null) {
								row3 = fromLookup_row3;
							}

							///////////////////////////////////////////////
							// Starting Lookup Table "row4"
							///////////////////////////////////////////////

							boolean forceLooprow4 = false;

							row4Struct row4ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_4 = false;

								Object exprKeyValue_row4__dayId = row1.dateID;
								if (exprKeyValue_row4__dayId == null) {
									hasCasePrimitiveKeyWithNull_tMap_4 = true;
								} else {
									row4HashKey.dayId = (int) (Integer) exprKeyValue_row4__dayId;
								}

								row4HashKey.hashCodeDirty = true;

								if (!hasCasePrimitiveKeyWithNull_tMap_4) { // G_TM_M_091

									tHash_Lookup_row4.lookup(row4HashKey);

								} // G_TM_M_091

							} // G_TM_M_020

							if (tHash_Lookup_row4 != null && tHash_Lookup_row4.getCount(row4HashKey) > 1) { // G 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row4'
								// and it contains more one result from keys : row4.dayId = '" +
								// row4HashKey.dayId + "'");
							} // G 071

							row4Struct row4 = null;

							row4Struct fromLookup_row4 = null;
							row4 = row4Default;

							if (tHash_Lookup_row4 != null && tHash_Lookup_row4.hasNext()) { // G 099

								fromLookup_row4 = tHash_Lookup_row4.next();

							} // G 099

							if (fromLookup_row4 != null) {
								row4 = fromLookup_row4;
							}

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
								// ###############################
								// # Output tables

								factsales = null;

// # Output table : 'factsales'
								factsales_tmp.dateID = row1.dateID;
								factsales_tmp.customerSK = row2.customerSK;
								factsales_tmp.produitSK = row3.produitSK;
								factsales_tmp.saleAmount = row1.saleAmount;
								factsales_tmp.quantity = row1.quantity;
								factsales = factsales_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_4 = false;

							tos_count_tMap_4++;

							/**
							 * [tMap_4 main ] stop
							 */

							/**
							 * [tMap_4 process_data_begin ] start
							 */

							currentComponent = "tMap_4";

							/**
							 * [tMap_4 process_data_begin ] stop
							 */
// Start of branch "factsales"
							if (factsales != null) {

								/**
								 * [tReplicate_1 main ] start
								 */

								currentComponent = "tReplicate_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "factsales"

									);
								}

								row6 = new row6Struct();

								row6.dateID = factsales.dateID;
								row6.produitSK = factsales.customerSK;
								row6.customerSK = factsales.produitSK;
								row6.saleAmount = factsales.saleAmount;
								row6.quantity = factsales.quantity;

								tos_count_tReplicate_1++;

								/**
								 * [tReplicate_1 main ] stop
								 */

								/**
								 * [tReplicate_1 process_data_begin ] start
								 */

								currentComponent = "tReplicate_1";

								/**
								 * [tReplicate_1 process_data_begin ] stop
								 */

								/**
								 * [tLogRow_1 main ] start
								 */

								currentComponent = "tLogRow_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "row6"

									);
								}

///////////////////////

								String[] row_tLogRow_1 = new String[5];

								row_tLogRow_1[0] = String.valueOf(row6.dateID);

								row_tLogRow_1[1] = String.valueOf(row6.produitSK);

								row_tLogRow_1[2] = String.valueOf(row6.customerSK);

								if (row6.saleAmount != null) { //
									row_tLogRow_1[3] = row6.saleAmount.setScale(4, java.math.RoundingMode.HALF_UP)
											.toPlainString();

								} //

								if (row6.quantity != null) { //
									row_tLogRow_1[4] = row6.quantity.setScale(4, java.math.RoundingMode.HALF_UP)
											.toPlainString();

								} //

								util_tLogRow_1.addRow(row_tLogRow_1);
								nb_line_tLogRow_1++;
//////

//////

///////////////////////

								tos_count_tLogRow_1++;

								/**
								 * [tLogRow_1 main ] stop
								 */

								/**
								 * [tLogRow_1 process_data_begin ] start
								 */

								currentComponent = "tLogRow_1";

								/**
								 * [tLogRow_1 process_data_begin ] stop
								 */

								/**
								 * [tLogRow_1 process_data_end ] start
								 */

								currentComponent = "tLogRow_1";

								/**
								 * [tLogRow_1 process_data_end ] stop
								 */

								/**
								 * [tReplicate_1 process_data_end ] start
								 */

								currentComponent = "tReplicate_1";

								/**
								 * [tReplicate_1 process_data_end ] stop
								 */

							} // End of branch "factsales"

							/**
							 * [tMap_4 process_data_end ] start
							 */

							currentComponent = "tMap_4";

							/**
							 * [tMap_4 process_data_end ] stop
							 */

							/**
							 * [tUnite_1 process_data_end ] start
							 */

							currentComponent = "tUnite_1";

							/**
							 * [tUnite_1 process_data_end ] stop
							 */

						} // End of branch "measure_acc"

						/**
						 * [tMap_1 process_data_end ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 process_data_end ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 end ] start
						 */

						currentComponent = "tDBInput_1";

					}
				} finally {
					if (rs_tDBInput_1 != null) {
						rs_tDBInput_1.close();
					}
					if (stmt_tDBInput_1 != null) {
						stmt_tDBInput_1.close();
					}
					if (conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {

						conn_tDBInput_1.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_1_NB_LINE", nb_line_tDBInput_1);

				ok_Hash.put("tDBInput_1", true);
				end_Hash.put("tDBInput_1", System.currentTimeMillis());

				/**
				 * [tDBInput_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_order_access != null) {
					tHash_Lookup_order_access.endGet();
				}
				globalMap.remove("tHash_Lookup_order_access");

// ###############################

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "order_det_access");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "order_det_mss");
				}

				int tos_count_tMap_2 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<order_mssStruct> tHash_Lookup_order_mss = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<order_mssStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<order_mssStruct>) globalMap
						.get("tHash_Lookup_order_mss"));

				order_mssStruct order_mssHashKey = new order_mssStruct();
				order_mssStruct order_mssDefault = new order_mssStruct();
// ###############################

// ###############################
// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
				measure_mssStruct measure_mss_tmp = new measure_mssStruct();
// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tDBInput_7 begin ] start
				 */

				ok_Hash.put("tDBInput_7", false);
				start_Hash.put("tDBInput_7", System.currentTimeMillis());

				currentComponent = "tDBInput_7";

				int tos_count_tDBInput_7 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_7 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_7 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_7 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_7, talendToDBArray_tDBInput_7);
				int nb_line_tDBInput_7 = 0;
				java.sql.Connection conn_tDBInput_7 = null;
				String driverClass_tDBInput_7 = "net.sourceforge.jtds.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBInput_7 = java.lang.Class.forName(driverClass_tDBInput_7);
				String dbUser_tDBInput_7 = "sa";

				final String decryptedPassword_tDBInput_7 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:GMPDE0iUABf64nf9juP0J7VkMMgXg8mJR+ZvH0novQ==");

				String dbPwd_tDBInput_7 = decryptedPassword_tDBInput_7;

				String port_tDBInput_7 = "1433";
				String dbname_tDBInput_7 = "NORTHWND";
				String url_tDBInput_7 = "jdbc:jtds:sqlserver://" + "localhost";
				if (!"".equals(port_tDBInput_7)) {
					url_tDBInput_7 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBInput_7)) {
					url_tDBInput_7 += "//" + "NORTHWND";
				}
				url_tDBInput_7 += ";appName=" + projectName + ";" + "";
				String dbschema_tDBInput_7 = "dbo";

				conn_tDBInput_7 = java.sql.DriverManager.getConnection(url_tDBInput_7, dbUser_tDBInput_7,
						dbPwd_tDBInput_7);

				java.sql.Statement stmt_tDBInput_7 = conn_tDBInput_7.createStatement();

				String dbquery_tDBInput_7 = "SELECT dbo.\"Order Details\".OrderID,\n		dbo.\"Order Details\".ProductID,\n		dbo.\"Order Details\".UnitPrice,\n		dbo.\"Ord"
						+ "er Details\".Quantity,\n		dbo.\"Order Details\".Discount\nFROM	dbo.\"Order Details\"";

				globalMap.put("tDBInput_7_QUERY", dbquery_tDBInput_7);
				java.sql.ResultSet rs_tDBInput_7 = null;

				try {
					rs_tDBInput_7 = stmt_tDBInput_7.executeQuery(dbquery_tDBInput_7);
					java.sql.ResultSetMetaData rsmd_tDBInput_7 = rs_tDBInput_7.getMetaData();
					int colQtyInRs_tDBInput_7 = rsmd_tDBInput_7.getColumnCount();

					String tmpContent_tDBInput_7 = null;

					while (rs_tDBInput_7.next()) {
						nb_line_tDBInput_7++;

						if (colQtyInRs_tDBInput_7 < 1) {
							order_det_mss.OrderID = 0;
						} else {

							order_det_mss.OrderID = rs_tDBInput_7.getInt(1);
							if (rs_tDBInput_7.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_7 < 2) {
							order_det_mss.ProductID = 0;
						} else {

							order_det_mss.ProductID = rs_tDBInput_7.getInt(2);
							if (rs_tDBInput_7.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_7 < 3) {
							order_det_mss.UnitPrice = null;
						} else {

							order_det_mss.UnitPrice = rs_tDBInput_7.getBigDecimal(3);
							if (rs_tDBInput_7.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_7 < 4) {
							order_det_mss.Quantity = 0;
						} else {

							order_det_mss.Quantity = rs_tDBInput_7.getShort(4);
							if (rs_tDBInput_7.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_7 < 5) {
							order_det_mss.Discount = 0;
						} else {

							order_det_mss.Discount = rs_tDBInput_7.getFloat(5);
							if (rs_tDBInput_7.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}

						/**
						 * [tDBInput_7 begin ] stop
						 */

						/**
						 * [tDBInput_7 main ] start
						 */

						currentComponent = "tDBInput_7";

						tos_count_tDBInput_7++;

						/**
						 * [tDBInput_7 main ] stop
						 */

						/**
						 * [tDBInput_7 process_data_begin ] start
						 */

						currentComponent = "tDBInput_7";

						/**
						 * [tDBInput_7 process_data_begin ] stop
						 */

						/**
						 * [tMap_2 main ] start
						 */

						currentComponent = "tMap_2";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "order_det_mss"

							);
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_2 = false;
						boolean mainRowRejected_tMap_2 = false;

						///////////////////////////////////////////////
						// Starting Lookup Table "order_mss"
						///////////////////////////////////////////////

						boolean forceLooporder_mss = false;

						order_mssStruct order_mssObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_2 = false;

							Object exprKeyValue_order_mss__OrderID = order_det_mss.OrderID;
							if (exprKeyValue_order_mss__OrderID == null) {
								hasCasePrimitiveKeyWithNull_tMap_2 = true;
							} else {
								order_mssHashKey.OrderID = (int) (Integer) exprKeyValue_order_mss__OrderID;
							}

							order_mssHashKey.hashCodeDirty = true;

							if (!hasCasePrimitiveKeyWithNull_tMap_2) { // G_TM_M_091

								tHash_Lookup_order_mss.lookup(order_mssHashKey);

							} // G_TM_M_091

						} // G_TM_M_020

						if (tHash_Lookup_order_mss != null && tHash_Lookup_order_mss.getCount(order_mssHashKey) > 1) { // G
																														// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
							// 'order_mss' and it contains more one result from keys : order_mss.OrderID =
							// '" + order_mssHashKey.OrderID + "'");
						} // G 071

						order_mssStruct order_mss = null;

						order_mssStruct fromLookup_order_mss = null;
						order_mss = order_mssDefault;

						if (tHash_Lookup_order_mss != null && tHash_Lookup_order_mss.hasNext()) { // G 099

							fromLookup_order_mss = tHash_Lookup_order_mss.next();

						} // G 099

						if (fromLookup_order_mss != null) {
							order_mss = fromLookup_order_mss;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
							// ###############################
							// # Output tables

							measure_mss = null;

// # Output table : 'measure_mss'
							measure_mss_tmp.OrderDate = Integer
									.parseInt(TalendDate.formatDateInUTC("yyyyMMdd", order_mss.OrderDate));
							measure_mss_tmp.customCode = order_mss.CustomerID + "_mss";
							measure_mss_tmp.productCode = String.valueOf(order_det_mss.ProductID) + "_mss";
							measure_mss_tmp.saleAmount = order_det_mss.UnitPrice
									.multiply(new BigDecimal((order_det_mss.Quantity)));
							measure_mss_tmp.quantity = new BigDecimal(String.valueOf(order_det_mss.Quantity));
							measure_mss = measure_mss_tmp;
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_2 = false;

						tos_count_tMap_2++;

						/**
						 * [tMap_2 main ] stop
						 */

						/**
						 * [tMap_2 process_data_begin ] start
						 */

						currentComponent = "tMap_2";

						/**
						 * [tMap_2 process_data_begin ] stop
						 */
// Start of branch "measure_mss"
						if (measure_mss != null) {

							/**
							 * [tUnite_1 main ] start
							 */

							currentComponent = "tUnite_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "measure_mss"

								);
							}

//////////

// for output
							row1 = new row1Struct();

							row1.dateID = measure_mss.OrderDate;
							row1.customerCode = measure_mss.customCode;
							row1.productCode = measure_mss.productCode;
							row1.saleAmount = measure_mss.saleAmount;
							row1.quantity = measure_mss.quantity;

							nb_line_tUnite_1++;

//////////

							tos_count_tUnite_1++;

							/**
							 * [tUnite_1 main ] stop
							 */

							/**
							 * [tUnite_1 process_data_begin ] start
							 */

							currentComponent = "tUnite_1";

							/**
							 * [tUnite_1 process_data_begin ] stop
							 */

							/**
							 * [tMap_4 main ] start
							 */

							currentComponent = "tMap_4";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "row1"

								);
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_4 = false;
							boolean mainRowRejected_tMap_4 = false;

							///////////////////////////////////////////////
							// Starting Lookup Table "row2"
							///////////////////////////////////////////////

							boolean forceLooprow2 = false;

							row2Struct row2ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_4 = false;

								row2HashKey.customerNumber = row1.customerCode;

								row2HashKey.hashCodeDirty = true;

								tHash_Lookup_row2.lookup(row2HashKey);

							} // G_TM_M_020

							if (tHash_Lookup_row2 != null && tHash_Lookup_row2.getCount(row2HashKey) > 1) { // G 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row2'
								// and it contains more one result from keys : row2.customerNumber = '" +
								// row2HashKey.customerNumber + "'");
							} // G 071

							row2Struct row2 = null;

							row2Struct fromLookup_row2 = null;
							row2 = row2Default;

							if (tHash_Lookup_row2 != null && tHash_Lookup_row2.hasNext()) { // G 099

								fromLookup_row2 = tHash_Lookup_row2.next();

							} // G 099

							if (fromLookup_row2 != null) {
								row2 = fromLookup_row2;
							}

							///////////////////////////////////////////////
							// Starting Lookup Table "row3"
							///////////////////////////////////////////////

							boolean forceLooprow3 = false;

							row3Struct row3ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_4 = false;

								row3HashKey.ID = row1.productCode;

								row3HashKey.hashCodeDirty = true;

								tHash_Lookup_row3.lookup(row3HashKey);

							} // G_TM_M_020

							if (tHash_Lookup_row3 != null && tHash_Lookup_row3.getCount(row3HashKey) > 1) { // G 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row3'
								// and it contains more one result from keys : row3.ID = '" + row3HashKey.ID +
								// "'");
							} // G 071

							row3Struct row3 = null;

							row3Struct fromLookup_row3 = null;
							row3 = row3Default;

							if (tHash_Lookup_row3 != null && tHash_Lookup_row3.hasNext()) { // G 099

								fromLookup_row3 = tHash_Lookup_row3.next();

							} // G 099

							if (fromLookup_row3 != null) {
								row3 = fromLookup_row3;
							}

							///////////////////////////////////////////////
							// Starting Lookup Table "row4"
							///////////////////////////////////////////////

							boolean forceLooprow4 = false;

							row4Struct row4ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_4 = false;

								Object exprKeyValue_row4__dayId = row1.dateID;
								if (exprKeyValue_row4__dayId == null) {
									hasCasePrimitiveKeyWithNull_tMap_4 = true;
								} else {
									row4HashKey.dayId = (int) (Integer) exprKeyValue_row4__dayId;
								}

								row4HashKey.hashCodeDirty = true;

								if (!hasCasePrimitiveKeyWithNull_tMap_4) { // G_TM_M_091

									tHash_Lookup_row4.lookup(row4HashKey);

								} // G_TM_M_091

							} // G_TM_M_020

							if (tHash_Lookup_row4 != null && tHash_Lookup_row4.getCount(row4HashKey) > 1) { // G 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row4'
								// and it contains more one result from keys : row4.dayId = '" +
								// row4HashKey.dayId + "'");
							} // G 071

							row4Struct row4 = null;

							row4Struct fromLookup_row4 = null;
							row4 = row4Default;

							if (tHash_Lookup_row4 != null && tHash_Lookup_row4.hasNext()) { // G 099

								fromLookup_row4 = tHash_Lookup_row4.next();

							} // G 099

							if (fromLookup_row4 != null) {
								row4 = fromLookup_row4;
							}

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
								// ###############################
								// # Output tables

								factsales = null;

// # Output table : 'factsales'
								factsales_tmp.dateID = row1.dateID;
								factsales_tmp.customerSK = row2.customerSK;
								factsales_tmp.produitSK = row3.produitSK;
								factsales_tmp.saleAmount = row1.saleAmount;
								factsales_tmp.quantity = row1.quantity;
								factsales = factsales_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_4 = false;

							tos_count_tMap_4++;

							/**
							 * [tMap_4 main ] stop
							 */

							/**
							 * [tMap_4 process_data_begin ] start
							 */

							currentComponent = "tMap_4";

							/**
							 * [tMap_4 process_data_begin ] stop
							 */
// Start of branch "factsales"
							if (factsales != null) {

								/**
								 * [tReplicate_1 main ] start
								 */

								currentComponent = "tReplicate_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "factsales"

									);
								}

								row6 = new row6Struct();

								row6.dateID = factsales.dateID;
								row6.produitSK = factsales.customerSK;
								row6.customerSK = factsales.produitSK;
								row6.saleAmount = factsales.saleAmount;
								row6.quantity = factsales.quantity;

								tos_count_tReplicate_1++;

								/**
								 * [tReplicate_1 main ] stop
								 */

								/**
								 * [tReplicate_1 process_data_begin ] start
								 */

								currentComponent = "tReplicate_1";

								/**
								 * [tReplicate_1 process_data_begin ] stop
								 */

								/**
								 * [tLogRow_1 main ] start
								 */

								currentComponent = "tLogRow_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "row6"

									);
								}

///////////////////////

								String[] row_tLogRow_1 = new String[5];

								row_tLogRow_1[0] = String.valueOf(row6.dateID);

								row_tLogRow_1[1] = String.valueOf(row6.produitSK);

								row_tLogRow_1[2] = String.valueOf(row6.customerSK);

								if (row6.saleAmount != null) { //
									row_tLogRow_1[3] = row6.saleAmount.setScale(4, java.math.RoundingMode.HALF_UP)
											.toPlainString();

								} //

								if (row6.quantity != null) { //
									row_tLogRow_1[4] = row6.quantity.setScale(4, java.math.RoundingMode.HALF_UP)
											.toPlainString();

								} //

								util_tLogRow_1.addRow(row_tLogRow_1);
								nb_line_tLogRow_1++;
//////

//////

///////////////////////

								tos_count_tLogRow_1++;

								/**
								 * [tLogRow_1 main ] stop
								 */

								/**
								 * [tLogRow_1 process_data_begin ] start
								 */

								currentComponent = "tLogRow_1";

								/**
								 * [tLogRow_1 process_data_begin ] stop
								 */

								/**
								 * [tLogRow_1 process_data_end ] start
								 */

								currentComponent = "tLogRow_1";

								/**
								 * [tLogRow_1 process_data_end ] stop
								 */

								/**
								 * [tReplicate_1 process_data_end ] start
								 */

								currentComponent = "tReplicate_1";

								/**
								 * [tReplicate_1 process_data_end ] stop
								 */

							} // End of branch "factsales"

							/**
							 * [tMap_4 process_data_end ] start
							 */

							currentComponent = "tMap_4";

							/**
							 * [tMap_4 process_data_end ] stop
							 */

							/**
							 * [tUnite_1 process_data_end ] start
							 */

							currentComponent = "tUnite_1";

							/**
							 * [tUnite_1 process_data_end ] stop
							 */

						} // End of branch "measure_mss"

						/**
						 * [tMap_2 process_data_end ] start
						 */

						currentComponent = "tMap_2";

						/**
						 * [tMap_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_7 process_data_end ] start
						 */

						currentComponent = "tDBInput_7";

						/**
						 * [tDBInput_7 process_data_end ] stop
						 */

						/**
						 * [tDBInput_7 end ] start
						 */

						currentComponent = "tDBInput_7";

					}
				} finally {
					if (rs_tDBInput_7 != null) {
						rs_tDBInput_7.close();
					}
					if (stmt_tDBInput_7 != null) {
						stmt_tDBInput_7.close();
					}
					if (conn_tDBInput_7 != null && !conn_tDBInput_7.isClosed()) {

						conn_tDBInput_7.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_7_NB_LINE", nb_line_tDBInput_7);

				ok_Hash.put("tDBInput_7", true);
				end_Hash.put("tDBInput_7", System.currentTimeMillis());

				/**
				 * [tDBInput_7 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_order_mss != null) {
					tHash_Lookup_order_mss.endGet();
				}
				globalMap.remove("tHash_Lookup_order_mss");

// ###############################

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "order_det_mss");
				}

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tMap_3 begin ] start
				 */

				ok_Hash.put("tMap_3", false);
				start_Hash.put("tMap_3", System.currentTimeMillis());

				currentComponent = "tMap_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "order_det_mys");
				}

				int tos_count_tMap_3 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<order_mysStruct> tHash_Lookup_order_mys = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<order_mysStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<order_mysStruct>) globalMap
						.get("tHash_Lookup_order_mys"));

				order_mysStruct order_mysHashKey = new order_mysStruct();
				order_mysStruct order_mysDefault = new order_mysStruct();
// ###############################

// ###############################
// # Vars initialization
				class Var__tMap_3__Struct {
				}
				Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
				measure_mysStruct measure_mys_tmp = new measure_mysStruct();
// ###############################

				/**
				 * [tMap_3 begin ] stop
				 */

				/**
				 * [tDBInput_4 begin ] start
				 */

				ok_Hash.put("tDBInput_4", false);
				start_Hash.put("tDBInput_4", System.currentTimeMillis());

				currentComponent = "tDBInput_4";

				int tos_count_tDBInput_4 = 0;

				java.util.Calendar calendar_tDBInput_4 = java.util.Calendar.getInstance();
				calendar_tDBInput_4.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_4 = calendar_tDBInput_4.getTime();
				int nb_line_tDBInput_4 = 0;
				java.sql.Connection conn_tDBInput_4 = null;
				String driverClass_tDBInput_4 = "com.mysql.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBInput_4 = java.lang.Class.forName(driverClass_tDBInput_4);
				String dbUser_tDBInput_4 = "root";

				final String decryptedPassword_tDBInput_4 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:Dv+j0ZSRe7m/plgIsie5gQpcONclhy9QIfxgb6vmIn2+czE7G3oLjw==");

				String dbPwd_tDBInput_4 = decryptedPassword_tDBInput_4;

				String properties_tDBInput_4 = "noDatetimeStringSync=true&enabledTLSProtocols=TLSv1.2,TLSv1.1,TLSv1";
				if (properties_tDBInput_4 == null || properties_tDBInput_4.trim().length() == 0) {
					properties_tDBInput_4 = "";
				}
				String url_tDBInput_4 = "jdbc:mysql://" + "localhost" + ":" + "3307" + "/" + "sales" + "?"
						+ properties_tDBInput_4;

				conn_tDBInput_4 = java.sql.DriverManager.getConnection(url_tDBInput_4, dbUser_tDBInput_4,
						dbPwd_tDBInput_4);

				java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();

				String dbquery_tDBInput_4 = "SELECT \n  `orderdetails`.`orderNumber`, \n  `orderdetails`.`productCode`, \n  `orderdetails`.`quantityOrdered`, \n  `order"
						+ "details`.`priceEach`, \n  `orderdetails`.`orderLineNumber`\nFROM `orderdetails`";

				globalMap.put("tDBInput_4_QUERY", dbquery_tDBInput_4);
				java.sql.ResultSet rs_tDBInput_4 = null;

				try {
					rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
					java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
					int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

					String tmpContent_tDBInput_4 = null;

					while (rs_tDBInput_4.next()) {
						nb_line_tDBInput_4++;

						if (colQtyInRs_tDBInput_4 < 1) {
							order_det_mys.orderNumber = 0;
						} else {

							order_det_mys.orderNumber = rs_tDBInput_4.getInt(1);
							if (rs_tDBInput_4.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 2) {
							order_det_mys.productCode = null;
						} else {

							order_det_mys.productCode = routines.system.JDBCUtil.getString(rs_tDBInput_4, 2, false);
						}
						if (colQtyInRs_tDBInput_4 < 3) {
							order_det_mys.quantityOrdered = 0;
						} else {

							order_det_mys.quantityOrdered = rs_tDBInput_4.getInt(3);
							if (rs_tDBInput_4.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 4) {
							order_det_mys.priceEach = null;
						} else {

							order_det_mys.priceEach = rs_tDBInput_4.getBigDecimal(4);
							if (rs_tDBInput_4.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 5) {
							order_det_mys.orderLineNumber = 0;
						} else {

							order_det_mys.orderLineNumber = rs_tDBInput_4.getShort(5);
							if (rs_tDBInput_4.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}

						/**
						 * [tDBInput_4 begin ] stop
						 */

						/**
						 * [tDBInput_4 main ] start
						 */

						currentComponent = "tDBInput_4";

						tos_count_tDBInput_4++;

						/**
						 * [tDBInput_4 main ] stop
						 */

						/**
						 * [tDBInput_4 process_data_begin ] start
						 */

						currentComponent = "tDBInput_4";

						/**
						 * [tDBInput_4 process_data_begin ] stop
						 */

						/**
						 * [tMap_3 main ] start
						 */

						currentComponent = "tMap_3";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "order_det_mys"

							);
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_3 = false;
						boolean mainRowRejected_tMap_3 = false;

						///////////////////////////////////////////////
						// Starting Lookup Table "order_mys"
						///////////////////////////////////////////////

						boolean forceLooporder_mys = false;

						order_mysStruct order_mysObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_3) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_3 = false;

							Object exprKeyValue_order_mys__orderNumber = order_det_mys.orderNumber;
							if (exprKeyValue_order_mys__orderNumber == null) {
								hasCasePrimitiveKeyWithNull_tMap_3 = true;
							} else {
								order_mysHashKey.orderNumber = (int) (Integer) exprKeyValue_order_mys__orderNumber;
							}

							order_mysHashKey.hashCodeDirty = true;

							if (!hasCasePrimitiveKeyWithNull_tMap_3) { // G_TM_M_091

								tHash_Lookup_order_mys.lookup(order_mysHashKey);

							} // G_TM_M_091

						} // G_TM_M_020

						if (tHash_Lookup_order_mys != null && tHash_Lookup_order_mys.getCount(order_mysHashKey) > 1) { // G
																														// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
							// 'order_mys' and it contains more one result from keys : order_mys.orderNumber
							// = '" + order_mysHashKey.orderNumber + "'");
						} // G 071

						order_mysStruct order_mys = null;

						order_mysStruct fromLookup_order_mys = null;
						order_mys = order_mysDefault;

						if (tHash_Lookup_order_mys != null && tHash_Lookup_order_mys.hasNext()) { // G 099

							fromLookup_order_mys = tHash_Lookup_order_mys.next();

						} // G 099

						if (fromLookup_order_mys != null) {
							order_mys = fromLookup_order_mys;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
							// ###############################
							// # Output tables

							measure_mys = null;

// # Output table : 'measure_mys'
							measure_mys_tmp.DateID = Integer
									.parseInt(TalendDate.formatDateInUTC("yyyyMMdd", order_mys.orderDate));
							measure_mys_tmp.customerCode = "" + order_mys.customerNumber + "_mys";
							measure_mys_tmp.productCode = order_det_mys.productCode + "_mys";
							measure_mys_tmp.salesAmount = order_det_mys.priceEach
									.multiply(new BigDecimal(String.valueOf(order_det_mys.quantityOrdered)));
							measure_mys_tmp.quantity = new BigDecimal(String.valueOf(order_det_mys.quantityOrdered));
							measure_mys = measure_mys_tmp;
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_3 = false;

						tos_count_tMap_3++;

						/**
						 * [tMap_3 main ] stop
						 */

						/**
						 * [tMap_3 process_data_begin ] start
						 */

						currentComponent = "tMap_3";

						/**
						 * [tMap_3 process_data_begin ] stop
						 */
// Start of branch "measure_mys"
						if (measure_mys != null) {

							/**
							 * [tUnite_1 main ] start
							 */

							currentComponent = "tUnite_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "measure_mys"

								);
							}

//////////

// for output
							row1 = new row1Struct();

							row1.dateID = measure_mys.DateID;
							row1.customerCode = measure_mys.customerCode;
							row1.productCode = measure_mys.productCode;
							row1.saleAmount = measure_mys.salesAmount;
							row1.quantity = measure_mys.quantity;

							nb_line_tUnite_1++;

//////////

							tos_count_tUnite_1++;

							/**
							 * [tUnite_1 main ] stop
							 */

							/**
							 * [tUnite_1 process_data_begin ] start
							 */

							currentComponent = "tUnite_1";

							/**
							 * [tUnite_1 process_data_begin ] stop
							 */

							/**
							 * [tMap_4 main ] start
							 */

							currentComponent = "tMap_4";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "row1"

								);
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_4 = false;
							boolean mainRowRejected_tMap_4 = false;

							///////////////////////////////////////////////
							// Starting Lookup Table "row2"
							///////////////////////////////////////////////

							boolean forceLooprow2 = false;

							row2Struct row2ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_4 = false;

								row2HashKey.customerNumber = row1.customerCode;

								row2HashKey.hashCodeDirty = true;

								tHash_Lookup_row2.lookup(row2HashKey);

							} // G_TM_M_020

							if (tHash_Lookup_row2 != null && tHash_Lookup_row2.getCount(row2HashKey) > 1) { // G 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row2'
								// and it contains more one result from keys : row2.customerNumber = '" +
								// row2HashKey.customerNumber + "'");
							} // G 071

							row2Struct row2 = null;

							row2Struct fromLookup_row2 = null;
							row2 = row2Default;

							if (tHash_Lookup_row2 != null && tHash_Lookup_row2.hasNext()) { // G 099

								fromLookup_row2 = tHash_Lookup_row2.next();

							} // G 099

							if (fromLookup_row2 != null) {
								row2 = fromLookup_row2;
							}

							///////////////////////////////////////////////
							// Starting Lookup Table "row3"
							///////////////////////////////////////////////

							boolean forceLooprow3 = false;

							row3Struct row3ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_4 = false;

								row3HashKey.ID = row1.productCode;

								row3HashKey.hashCodeDirty = true;

								tHash_Lookup_row3.lookup(row3HashKey);

							} // G_TM_M_020

							if (tHash_Lookup_row3 != null && tHash_Lookup_row3.getCount(row3HashKey) > 1) { // G 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row3'
								// and it contains more one result from keys : row3.ID = '" + row3HashKey.ID +
								// "'");
							} // G 071

							row3Struct row3 = null;

							row3Struct fromLookup_row3 = null;
							row3 = row3Default;

							if (tHash_Lookup_row3 != null && tHash_Lookup_row3.hasNext()) { // G 099

								fromLookup_row3 = tHash_Lookup_row3.next();

							} // G 099

							if (fromLookup_row3 != null) {
								row3 = fromLookup_row3;
							}

							///////////////////////////////////////////////
							// Starting Lookup Table "row4"
							///////////////////////////////////////////////

							boolean forceLooprow4 = false;

							row4Struct row4ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_4 = false;

								Object exprKeyValue_row4__dayId = row1.dateID;
								if (exprKeyValue_row4__dayId == null) {
									hasCasePrimitiveKeyWithNull_tMap_4 = true;
								} else {
									row4HashKey.dayId = (int) (Integer) exprKeyValue_row4__dayId;
								}

								row4HashKey.hashCodeDirty = true;

								if (!hasCasePrimitiveKeyWithNull_tMap_4) { // G_TM_M_091

									tHash_Lookup_row4.lookup(row4HashKey);

								} // G_TM_M_091

							} // G_TM_M_020

							if (tHash_Lookup_row4 != null && tHash_Lookup_row4.getCount(row4HashKey) > 1) { // G 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row4'
								// and it contains more one result from keys : row4.dayId = '" +
								// row4HashKey.dayId + "'");
							} // G 071

							row4Struct row4 = null;

							row4Struct fromLookup_row4 = null;
							row4 = row4Default;

							if (tHash_Lookup_row4 != null && tHash_Lookup_row4.hasNext()) { // G 099

								fromLookup_row4 = tHash_Lookup_row4.next();

							} // G 099

							if (fromLookup_row4 != null) {
								row4 = fromLookup_row4;
							}

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
								// ###############################
								// # Output tables

								factsales = null;

// # Output table : 'factsales'
								factsales_tmp.dateID = row1.dateID;
								factsales_tmp.customerSK = row2.customerSK;
								factsales_tmp.produitSK = row3.produitSK;
								factsales_tmp.saleAmount = row1.saleAmount;
								factsales_tmp.quantity = row1.quantity;
								factsales = factsales_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_4 = false;

							tos_count_tMap_4++;

							/**
							 * [tMap_4 main ] stop
							 */

							/**
							 * [tMap_4 process_data_begin ] start
							 */

							currentComponent = "tMap_4";

							/**
							 * [tMap_4 process_data_begin ] stop
							 */
// Start of branch "factsales"
							if (factsales != null) {

								/**
								 * [tReplicate_1 main ] start
								 */

								currentComponent = "tReplicate_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "factsales"

									);
								}

								row6 = new row6Struct();

								row6.dateID = factsales.dateID;
								row6.produitSK = factsales.customerSK;
								row6.customerSK = factsales.produitSK;
								row6.saleAmount = factsales.saleAmount;
								row6.quantity = factsales.quantity;

								tos_count_tReplicate_1++;

								/**
								 * [tReplicate_1 main ] stop
								 */

								/**
								 * [tReplicate_1 process_data_begin ] start
								 */

								currentComponent = "tReplicate_1";

								/**
								 * [tReplicate_1 process_data_begin ] stop
								 */

								/**
								 * [tLogRow_1 main ] start
								 */

								currentComponent = "tLogRow_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "row6"

									);
								}

///////////////////////

								String[] row_tLogRow_1 = new String[5];

								row_tLogRow_1[0] = String.valueOf(row6.dateID);

								row_tLogRow_1[1] = String.valueOf(row6.produitSK);

								row_tLogRow_1[2] = String.valueOf(row6.customerSK);

								if (row6.saleAmount != null) { //
									row_tLogRow_1[3] = row6.saleAmount.setScale(4, java.math.RoundingMode.HALF_UP)
											.toPlainString();

								} //

								if (row6.quantity != null) { //
									row_tLogRow_1[4] = row6.quantity.setScale(4, java.math.RoundingMode.HALF_UP)
											.toPlainString();

								} //

								util_tLogRow_1.addRow(row_tLogRow_1);
								nb_line_tLogRow_1++;
//////

//////

///////////////////////

								tos_count_tLogRow_1++;

								/**
								 * [tLogRow_1 main ] stop
								 */

								/**
								 * [tLogRow_1 process_data_begin ] start
								 */

								currentComponent = "tLogRow_1";

								/**
								 * [tLogRow_1 process_data_begin ] stop
								 */

								/**
								 * [tLogRow_1 process_data_end ] start
								 */

								currentComponent = "tLogRow_1";

								/**
								 * [tLogRow_1 process_data_end ] stop
								 */

								/**
								 * [tReplicate_1 process_data_end ] start
								 */

								currentComponent = "tReplicate_1";

								/**
								 * [tReplicate_1 process_data_end ] stop
								 */

							} // End of branch "factsales"

							/**
							 * [tMap_4 process_data_end ] start
							 */

							currentComponent = "tMap_4";

							/**
							 * [tMap_4 process_data_end ] stop
							 */

							/**
							 * [tUnite_1 process_data_end ] start
							 */

							currentComponent = "tUnite_1";

							/**
							 * [tUnite_1 process_data_end ] stop
							 */

						} // End of branch "measure_mys"

						/**
						 * [tMap_3 process_data_end ] start
						 */

						currentComponent = "tMap_3";

						/**
						 * [tMap_3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_4 process_data_end ] start
						 */

						currentComponent = "tDBInput_4";

						/**
						 * [tDBInput_4 process_data_end ] stop
						 */

						/**
						 * [tDBInput_4 end ] start
						 */

						currentComponent = "tDBInput_4";

					}
				} finally {
					if (rs_tDBInput_4 != null) {
						rs_tDBInput_4.close();
					}
					if (stmt_tDBInput_4 != null) {
						stmt_tDBInput_4.close();
					}
					if (conn_tDBInput_4 != null && !conn_tDBInput_4.isClosed()) {

						conn_tDBInput_4.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}

				globalMap.put("tDBInput_4_NB_LINE", nb_line_tDBInput_4);

				ok_Hash.put("tDBInput_4", true);
				end_Hash.put("tDBInput_4", System.currentTimeMillis());

				/**
				 * [tDBInput_4 end ] stop
				 */

				/**
				 * [tMap_3 end ] start
				 */

				currentComponent = "tMap_3";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_order_mys != null) {
					tHash_Lookup_order_mys.endGet();
				}
				globalMap.remove("tHash_Lookup_order_mys");

// ###############################

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "order_det_mys");
				}

				ok_Hash.put("tMap_3", true);
				end_Hash.put("tMap_3", System.currentTimeMillis());

				/**
				 * [tMap_3 end ] stop
				 */

				/**
				 * [tUnite_1 end ] start
				 */

				currentComponent = "tUnite_1";

				globalMap.put("tUnite_1_NB_LINE", nb_line_tUnite_1);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "measure_mss", "measure_acc", "measure_mys");
				}

				ok_Hash.put("tUnite_1", true);
				end_Hash.put("tUnite_1", System.currentTimeMillis());

				/**
				 * [tUnite_1 end ] stop
				 */

				/**
				 * [tMap_4 end ] start
				 */

				currentComponent = "tMap_4";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row2 != null) {
					tHash_Lookup_row2.endGet();
				}
				globalMap.remove("tHash_Lookup_row2");

				if (tHash_Lookup_row3 != null) {
					tHash_Lookup_row3.endGet();
				}
				globalMap.remove("tHash_Lookup_row3");

				if (tHash_Lookup_row4 != null) {
					tHash_Lookup_row4.endGet();
				}
				globalMap.remove("tHash_Lookup_row4");

// ###############################

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tMap_4", true);
				end_Hash.put("tMap_4", System.currentTimeMillis());

				/**
				 * [tMap_4 end ] stop
				 */

				/**
				 * [tReplicate_1 end ] start
				 */

				currentComponent = "tReplicate_1";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "factsales");
				}

				ok_Hash.put("tReplicate_1", true);
				end_Hash.put("tReplicate_1", System.currentTimeMillis());

				/**
				 * [tReplicate_1 end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

//////

				java.io.PrintStream consoleOut_tLogRow_1 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_1);
				}

				consoleOut_tLogRow_1.println(util_tLogRow_1.format().toString());
				consoleOut_tLogRow_1.flush();
//////
				globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

///////////////////////

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row6");
				}

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_4"
			globalMap.remove("tHash_Lookup_row4");

			// free memory for "tMap_4"
			globalMap.remove("tHash_Lookup_row3");

			// free memory for "tMap_4"
			globalMap.remove("tHash_Lookup_row2");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_order_access");

			// free memory for "tMap_3"
			globalMap.remove("tHash_Lookup_order_mys");

			// free memory for "tMap_2"
			globalMap.remove("tHash_Lookup_order_mss");

			try {

				/**
				 * [tDBInput_1 finally ] start
				 */

				currentComponent = "tDBInput_1";

				/**
				 * [tDBInput_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tDBInput_7 finally ] start
				 */

				currentComponent = "tDBInput_7";

				/**
				 * [tDBInput_7 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tDBInput_4 finally ] start
				 */

				currentComponent = "tDBInput_4";

				/**
				 * [tDBInput_4 finally ] stop
				 */

				/**
				 * [tMap_3 finally ] start
				 */

				currentComponent = "tMap_3";

				/**
				 * [tMap_3 finally ] stop
				 */

				/**
				 * [tUnite_1 finally ] start
				 */

				currentComponent = "tUnite_1";

				/**
				 * [tUnite_1 finally ] stop
				 */

				/**
				 * [tMap_4 finally ] start
				 */

				currentComponent = "tMap_4";

				/**
				 * [tMap_4 finally ] stop
				 */

				/**
				 * [tReplicate_1 finally ] start
				 */

				currentComponent = "tReplicate_1";

				/**
				 * [tReplicate_1 finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row4Struct implements routines.system.IPersistableComparableLookupRow<row4Struct> {
		final static byte[] commonByteArrayLock_PROJET_SYNTHESE_Job_fact_table_sales = new byte[0];
		static byte[] commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int dayId;

		public int getDayId() {
			return this.dayId;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.dayId;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row4Struct other = (row4Struct) obj;

			if (this.dayId != other.dayId)
				return false;

			return true;
		}

		public void copyDataTo(row4Struct other) {

			other.dayId = this.dayId;

		}

		public void copyKeysDataTo(row4Struct other) {

			other.dayId = this.dayId;

		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_SYNTHESE_Job_fact_table_sales) {

				try {

					int length = 0;

					this.dayId = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_PROJET_SYNTHESE_Job_fact_table_sales) {

				try {

					int length = 0;

					this.dayId = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.dayId);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
			try {

				// int

				dos.writeInt(this.dayId);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

			}

			finally {
			}

		}

		public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
			try {
				int length = 0;

			}

			finally {
			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

			} finally {
			}

		}

		public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut) {
			try {

			} finally {
			}
		}

		public boolean supportMarshaller() {
			return true;
		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("dayId=" + String.valueOf(dayId));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.dayId, other.dayId);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();

				/**
				 * [tAdvancedHash_row4 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row4", false);
				start_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row4");
				}

				int tos_count_tAdvancedHash_row4 = 0;

				// connection name:row4
				// source node:tDBInput_2 - inputs:(after_tDBInput_1) outputs:(row4,row4) |
				// target node:tAdvancedHash_row4 - inputs:(row4) outputs:()
				// linked node: tMap_4 - inputs:(row1,row4,row3,row2) outputs:(factsales)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row4 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row4Struct>getLookup(matchingModeEnum_row4);

				globalMap.put("tHash_Lookup_row4", tHash_Lookup_row4);

				/**
				 * [tAdvancedHash_row4 begin ] stop
				 */

				/**
				 * [tDBInput_2 begin ] start
				 */

				ok_Hash.put("tDBInput_2", false);
				start_Hash.put("tDBInput_2", System.currentTimeMillis());

				currentComponent = "tDBInput_2";

				int tos_count_tDBInput_2 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_2 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_2 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_2 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_2, talendToDBArray_tDBInput_2);
				int nb_line_tDBInput_2 = 0;
				java.sql.Connection conn_tDBInput_2 = null;
				String driverClass_tDBInput_2 = "net.sourceforge.jtds.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBInput_2 = java.lang.Class.forName(driverClass_tDBInput_2);
				String dbUser_tDBInput_2 = "sa";

				final String decryptedPassword_tDBInput_2 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:Stpqv47HVLd7+VHurKp8YVAtFX2rVIm5SYfIMgOz6Q==");

				String dbPwd_tDBInput_2 = decryptedPassword_tDBInput_2;

				String port_tDBInput_2 = "1433";
				String dbname_tDBInput_2 = "project_datawearhouse";
				String url_tDBInput_2 = "jdbc:jtds:sqlserver://" + "localhost";
				if (!"".equals(port_tDBInput_2)) {
					url_tDBInput_2 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBInput_2)) {
					url_tDBInput_2 += "//" + "project_datawearhouse";
				}
				url_tDBInput_2 += ";appName=" + projectName + ";" + "";
				String dbschema_tDBInput_2 = "dbo";

				conn_tDBInput_2 = java.sql.DriverManager.getConnection(url_tDBInput_2, dbUser_tDBInput_2,
						dbPwd_tDBInput_2);

				java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

				String dbquery_tDBInput_2 = "SELECT dbo.date_dim.dayId \nFROM	 dbo.date_dim";

				globalMap.put("tDBInput_2_QUERY", dbquery_tDBInput_2);
				java.sql.ResultSet rs_tDBInput_2 = null;

				try {
					rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
					java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
					int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

					String tmpContent_tDBInput_2 = null;

					while (rs_tDBInput_2.next()) {
						nb_line_tDBInput_2++;

						if (colQtyInRs_tDBInput_2 < 1) {
							row4.dayId = 0;
						} else {

							row4.dayId = rs_tDBInput_2.getInt(1);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}

						/**
						 * [tDBInput_2 begin ] stop
						 */

						/**
						 * [tDBInput_2 main ] start
						 */

						currentComponent = "tDBInput_2";

						tos_count_tDBInput_2++;

						/**
						 * [tDBInput_2 main ] stop
						 */

						/**
						 * [tDBInput_2 process_data_begin ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row4 main ] start
						 */

						currentComponent = "tAdvancedHash_row4";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row4"

							);
						}

						row4Struct row4_HashRow = new row4Struct();

						row4_HashRow.dayId = row4.dayId;

						tHash_Lookup_row4.put(row4_HashRow);

						tos_count_tAdvancedHash_row4++;

						/**
						 * [tAdvancedHash_row4 main ] stop
						 */

						/**
						 * [tAdvancedHash_row4 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row4";

						/**
						 * [tAdvancedHash_row4 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row4 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row4";

						/**
						 * [tAdvancedHash_row4 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 process_data_end ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 end ] start
						 */

						currentComponent = "tDBInput_2";

					}
				} finally {
					if (rs_tDBInput_2 != null) {
						rs_tDBInput_2.close();
					}
					if (stmt_tDBInput_2 != null) {
						stmt_tDBInput_2.close();
					}
					if (conn_tDBInput_2 != null && !conn_tDBInput_2.isClosed()) {

						conn_tDBInput_2.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_2_NB_LINE", nb_line_tDBInput_2);

				ok_Hash.put("tDBInput_2", true);
				end_Hash.put("tDBInput_2", System.currentTimeMillis());

				/**
				 * [tDBInput_2 end ] stop
				 */

				/**
				 * [tAdvancedHash_row4 end ] start
				 */

				currentComponent = "tAdvancedHash_row4";

				tHash_Lookup_row4.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row4");
				}

				ok_Hash.put("tAdvancedHash_row4", true);
				end_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row4 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_2 finally ] start
				 */

				currentComponent = "tDBInput_2";

				/**
				 * [tDBInput_2 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row4 finally ] start
				 */

				currentComponent = "tAdvancedHash_row4";

				/**
				 * [tAdvancedHash_row4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}

	public static class order_accessStruct
			implements routines.system.IPersistableComparableLookupRow<order_accessStruct> {
		final static byte[] commonByteArrayLock_PROJET_SYNTHESE_Job_fact_table_sales = new byte[0];
		static byte[] commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Long ORDER_ID;

		public Long getORDER_ID() {
			return this.ORDER_ID;
		}

		public Long CUSTOMER_ID;

		public Long getCUSTOMER_ID() {
			return this.CUSTOMER_ID;
		}

		public java.util.Date ORDER_DATE;

		public java.util.Date getORDER_DATE() {
			return this.ORDER_DATE;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ORDER_ID == null) ? 0 : this.ORDER_ID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final order_accessStruct other = (order_accessStruct) obj;

			if (this.ORDER_ID == null) {
				if (other.ORDER_ID != null)
					return false;

			} else if (!this.ORDER_ID.equals(other.ORDER_ID))

				return false;

			return true;
		}

		public void copyDataTo(order_accessStruct other) {

			other.ORDER_ID = this.ORDER_ID;
			other.CUSTOMER_ID = this.CUSTOMER_ID;
			other.ORDER_DATE = this.ORDER_DATE;

		}

		public void copyKeysDataTo(order_accessStruct other) {

			other.ORDER_ID = this.ORDER_ID;

		}

		private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller)
				throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_SYNTHESE_Job_fact_table_sales) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.ORDER_ID = null;
					} else {
						this.ORDER_ID = dis.readLong();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_PROJET_SYNTHESE_Job_fact_table_sales) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.ORDER_ID = null;
					} else {
						this.ORDER_ID = dis.readLong();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.ORDER_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.ORDER_ID);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Long

				if (this.ORDER_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.ORDER_ID);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				length = dis.readByte();
				if (length == -1) {
					this.CUSTOMER_ID = null;
				} else {
					this.CUSTOMER_ID = dis.readLong();
				}

				this.ORDER_DATE = readDate(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
			try {
				int length = 0;

				length = objectIn.readByte();
				if (length == -1) {
					this.CUSTOMER_ID = null;
				} else {
					this.CUSTOMER_ID = objectIn.readLong();
				}

				this.ORDER_DATE = readDate(dis, objectIn);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				if (this.CUSTOMER_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.CUSTOMER_ID);
				}

				writeDate(this.ORDER_DATE, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut) {
			try {

				if (this.CUSTOMER_ID == null) {
					objectOut.writeByte(-1);
				} else {
					objectOut.writeByte(0);
					objectOut.writeLong(this.CUSTOMER_ID);
				}

				writeDate(this.ORDER_DATE, dos, objectOut);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}

		public boolean supportMarshaller() {
			return true;
		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ORDER_ID=" + String.valueOf(ORDER_ID));
			sb.append(",CUSTOMER_ID=" + String.valueOf(CUSTOMER_ID));
			sb.append(",ORDER_DATE=" + String.valueOf(ORDER_DATE));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(order_accessStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ORDER_ID, other.ORDER_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				order_accessStruct order_access = new order_accessStruct();

				/**
				 * [tAdvancedHash_order_access begin ] start
				 */

				ok_Hash.put("tAdvancedHash_order_access", false);
				start_Hash.put("tAdvancedHash_order_access", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_order_access";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "order_access");
				}

				int tos_count_tAdvancedHash_order_access = 0;

				// connection name:order_access
				// source node:tDBInput_3 - inputs:(after_tDBInput_1)
				// outputs:(order_access,order_access) | target node:tAdvancedHash_order_access
				// - inputs:(order_access) outputs:()
				// linked node: tMap_1 - inputs:(order_det_access,order_access)
				// outputs:(measure_acc)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_order_access = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<order_accessStruct> tHash_Lookup_order_access = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<order_accessStruct>getLookup(matchingModeEnum_order_access);

				globalMap.put("tHash_Lookup_order_access", tHash_Lookup_order_access);

				/**
				 * [tAdvancedHash_order_access begin ] stop
				 */

				/**
				 * [tDBInput_3 begin ] start
				 */

				ok_Hash.put("tDBInput_3", false);
				start_Hash.put("tDBInput_3", System.currentTimeMillis());

				currentComponent = "tDBInput_3";

				int tos_count_tDBInput_3 = 0;

				int nb_line_tDBInput_3 = 0;
				java.sql.Connection conn_tDBInput_3 = null;
				String driverClass_tDBInput_3 = "net.ucanaccess.jdbc.UcanaccessDriver";
				java.lang.Class.forName(driverClass_tDBInput_3);

				String url_tDBInput_3 = "jdbc:ucanaccess://" + "C:/Users/dell/Downloads/northwind.accdb"
						+ ";jackcessOpener=org.talend.ucanaccess.encrypt.CryptCodecOpener;singleConnection=true";
				String dbUser_tDBInput_3 = "";

				final String decryptedPassword_tDBInput_3 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:3RmORyBUjjCEFC3CIi8XLe7ulvjXq6FMi7qxRw==");

				String dbPwd_tDBInput_3 = decryptedPassword_tDBInput_3;

				String atnParams_tDBInput_3 = "jackcessOpener=org.talend.ucanaccess.encrypt.CryptCodecOpener;memory=false";
				atnParams_tDBInput_3 = atnParams_tDBInput_3.replaceAll("&", "\n");
				java.util.Properties atnParamsPrope_tDBInput_3 = new java.util.Properties();
				atnParamsPrope_tDBInput_3.put("user", dbUser_tDBInput_3);
				atnParamsPrope_tDBInput_3.put("password", dbPwd_tDBInput_3);
				atnParamsPrope_tDBInput_3.load(new java.io.ByteArrayInputStream(atnParams_tDBInput_3.getBytes()));
				conn_tDBInput_3 = java.sql.DriverManager.getConnection(url_tDBInput_3, atnParamsPrope_tDBInput_3);

				java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

				String dbquery_tDBInput_3 = "SELECT \n  ORDERS.[ORDER ID], \n  ORDERS.[CUSTOMER ID], \n  ORDERS.[ORDER DATE]\nFROM ORDERS";

				globalMap.put("tDBInput_3_QUERY", dbquery_tDBInput_3);
				java.sql.ResultSet rs_tDBInput_3 = null;

				try {
					rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
					java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
					int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

					String tmpContent_tDBInput_3 = null;

					while (rs_tDBInput_3.next()) {
						nb_line_tDBInput_3++;

						if (colQtyInRs_tDBInput_3 < 1) {
							order_access.ORDER_ID = null;
						} else {

							order_access.ORDER_ID = rs_tDBInput_3.getLong(1);
							if (rs_tDBInput_3.wasNull()) {
								order_access.ORDER_ID = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 2) {
							order_access.CUSTOMER_ID = null;
						} else {

							order_access.CUSTOMER_ID = rs_tDBInput_3.getLong(2);
							if (rs_tDBInput_3.wasNull()) {
								order_access.CUSTOMER_ID = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 3) {
							order_access.ORDER_DATE = null;
						} else {

							java.sql.Timestamp timestamp_tDBInput_3 = rs_tDBInput_3.getTimestamp(3);
							if (timestamp_tDBInput_3 != null) {
								order_access.ORDER_DATE = new java.util.Date(timestamp_tDBInput_3.getTime());
							} else {
								order_access.ORDER_DATE = null;
							}
						}

						/**
						 * [tDBInput_3 begin ] stop
						 */

						/**
						 * [tDBInput_3 main ] start
						 */

						currentComponent = "tDBInput_3";

						tos_count_tDBInput_3++;

						/**
						 * [tDBInput_3 main ] stop
						 */

						/**
						 * [tDBInput_3 process_data_begin ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_order_access main ] start
						 */

						currentComponent = "tAdvancedHash_order_access";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "order_access"

							);
						}

						order_accessStruct order_access_HashRow = new order_accessStruct();

						order_access_HashRow.ORDER_ID = order_access.ORDER_ID;

						order_access_HashRow.CUSTOMER_ID = order_access.CUSTOMER_ID;

						order_access_HashRow.ORDER_DATE = order_access.ORDER_DATE;

						tHash_Lookup_order_access.put(order_access_HashRow);

						tos_count_tAdvancedHash_order_access++;

						/**
						 * [tAdvancedHash_order_access main ] stop
						 */

						/**
						 * [tAdvancedHash_order_access process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_order_access";

						/**
						 * [tAdvancedHash_order_access process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_order_access process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_order_access";

						/**
						 * [tAdvancedHash_order_access process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 process_data_end ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 end ] start
						 */

						currentComponent = "tDBInput_3";

					}
				} finally {
					if (rs_tDBInput_3 != null) {
						rs_tDBInput_3.close();
					}
					if (stmt_tDBInput_3 != null) {
						stmt_tDBInput_3.close();
					}
					if (conn_tDBInput_3 != null && !conn_tDBInput_3.isClosed()) {

						conn_tDBInput_3.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_3_NB_LINE", nb_line_tDBInput_3);

				ok_Hash.put("tDBInput_3", true);
				end_Hash.put("tDBInput_3", System.currentTimeMillis());

				/**
				 * [tDBInput_3 end ] stop
				 */

				/**
				 * [tAdvancedHash_order_access end ] start
				 */

				currentComponent = "tAdvancedHash_order_access";

				tHash_Lookup_order_access.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "order_access");
				}

				ok_Hash.put("tAdvancedHash_order_access", true);
				end_Hash.put("tAdvancedHash_order_access", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_order_access end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_3 finally ] start
				 */

				currentComponent = "tDBInput_3";

				/**
				 * [tDBInput_3 finally ] stop
				 */

				/**
				 * [tAdvancedHash_order_access finally ] start
				 */

				currentComponent = "tAdvancedHash_order_access";

				/**
				 * [tAdvancedHash_order_access finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}

	public static class row3Struct implements routines.system.IPersistableComparableLookupRow<row3Struct> {
		final static byte[] commonByteArrayLock_PROJET_SYNTHESE_Job_fact_table_sales = new byte[0];
		static byte[] commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer produitSK;

		public Integer getProduitSK() {
			return this.produitSK;
		}

		public String ID;

		public String getID() {
			return this.ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row3Struct other = (row3Struct) obj;

			if (this.ID == null) {
				if (other.ID != null)
					return false;

			} else if (!this.ID.equals(other.ID))

				return false;

			return true;
		}

		public void copyDataTo(row3Struct other) {

			other.produitSK = this.produitSK;
			other.ID = this.ID;

		}

		public void copyKeysDataTo(row3Struct other) {

			other.ID = this.ID;

		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = unmarshaller.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller)
				throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales.length) {
					if (length < 1024 && commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales.length == 0) {
						commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales = new byte[1024];
					} else {
						commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales, 0, length);
				strReturn = new String(commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales.length) {
					if (length < 1024 && commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales.length == 0) {
						commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales = new byte[1024];
					} else {
						commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales, 0, length);
				strReturn = new String(commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_SYNTHESE_Job_fact_table_sales) {

				try {

					int length = 0;

					this.ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_PROJET_SYNTHESE_Job_fact_table_sales) {

				try {

					int length = 0;

					this.ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.produitSK = readInteger(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
			try {
				int length = 0;

				this.produitSK = readInteger(dis, objectIn);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeInteger(this.produitSK, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut) {
			try {

				writeInteger(this.produitSK, dos, objectOut);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}

		public boolean supportMarshaller() {
			return true;
		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("produitSK=" + String.valueOf(produitSK));
			sb.append(",ID=" + ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID, other.ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();

				/**
				 * [tAdvancedHash_row3 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row3", false);
				start_Hash.put("tAdvancedHash_row3", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row3");
				}

				int tos_count_tAdvancedHash_row3 = 0;

				// connection name:row3
				// source node:tDBInput_6 - inputs:(after_tDBInput_1) outputs:(row3,row3) |
				// target node:tAdvancedHash_row3 - inputs:(row3) outputs:()
				// linked node: tMap_4 - inputs:(row1,row4,row3,row2) outputs:(factsales)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row3 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row3Struct>getLookup(matchingModeEnum_row3);

				globalMap.put("tHash_Lookup_row3", tHash_Lookup_row3);

				/**
				 * [tAdvancedHash_row3 begin ] stop
				 */

				/**
				 * [tDBInput_6 begin ] start
				 */

				ok_Hash.put("tDBInput_6", false);
				start_Hash.put("tDBInput_6", System.currentTimeMillis());

				currentComponent = "tDBInput_6";

				int tos_count_tDBInput_6 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_6 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_6 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_6 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_6, talendToDBArray_tDBInput_6);
				int nb_line_tDBInput_6 = 0;
				java.sql.Connection conn_tDBInput_6 = null;
				String driverClass_tDBInput_6 = "net.sourceforge.jtds.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBInput_6 = java.lang.Class.forName(driverClass_tDBInput_6);
				String dbUser_tDBInput_6 = "sa";

				final String decryptedPassword_tDBInput_6 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:2xVW1ZoWW+RGqW1kl4/eQY88FClX6GLlcM3q9mUhKA==");

				String dbPwd_tDBInput_6 = decryptedPassword_tDBInput_6;

				String port_tDBInput_6 = "1433";
				String dbname_tDBInput_6 = "project_datawearhouse";
				String url_tDBInput_6 = "jdbc:jtds:sqlserver://" + "localhost";
				if (!"".equals(port_tDBInput_6)) {
					url_tDBInput_6 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBInput_6)) {
					url_tDBInput_6 += "//" + "project_datawearhouse";
				}
				url_tDBInput_6 += ";appName=" + projectName + ";" + "";
				String dbschema_tDBInput_6 = "dbo";

				conn_tDBInput_6 = java.sql.DriverManager.getConnection(url_tDBInput_6, dbUser_tDBInput_6,
						dbPwd_tDBInput_6);

				java.sql.Statement stmt_tDBInput_6 = conn_tDBInput_6.createStatement();

				String dbquery_tDBInput_6 = "SELECT dbo.produit_dim.produitSK,\n		dbo.produit_dim.\"ID\"\nFROM	dbo.produit_dim";

				globalMap.put("tDBInput_6_QUERY", dbquery_tDBInput_6);
				java.sql.ResultSet rs_tDBInput_6 = null;

				try {
					rs_tDBInput_6 = stmt_tDBInput_6.executeQuery(dbquery_tDBInput_6);
					java.sql.ResultSetMetaData rsmd_tDBInput_6 = rs_tDBInput_6.getMetaData();
					int colQtyInRs_tDBInput_6 = rsmd_tDBInput_6.getColumnCount();

					String tmpContent_tDBInput_6 = null;

					while (rs_tDBInput_6.next()) {
						nb_line_tDBInput_6++;

						if (colQtyInRs_tDBInput_6 < 1) {
							row3.produitSK = null;
						} else {

							row3.produitSK = rs_tDBInput_6.getInt(1);
							if (rs_tDBInput_6.wasNull()) {
								row3.produitSK = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 2) {
							row3.ID = null;
						} else {

							tmpContent_tDBInput_6 = rs_tDBInput_6.getString(2);
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
									row3.ID = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row3.ID = tmpContent_tDBInput_6;
								}
							} else {
								row3.ID = null;
							}
						}

						/**
						 * [tDBInput_6 begin ] stop
						 */

						/**
						 * [tDBInput_6 main ] start
						 */

						currentComponent = "tDBInput_6";

						tos_count_tDBInput_6++;

						/**
						 * [tDBInput_6 main ] stop
						 */

						/**
						 * [tDBInput_6 process_data_begin ] start
						 */

						currentComponent = "tDBInput_6";

						/**
						 * [tDBInput_6 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row3 main ] start
						 */

						currentComponent = "tAdvancedHash_row3";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row3"

							);
						}

						row3Struct row3_HashRow = new row3Struct();

						row3_HashRow.produitSK = row3.produitSK;

						row3_HashRow.ID = row3.ID;

						tHash_Lookup_row3.put(row3_HashRow);

						tos_count_tAdvancedHash_row3++;

						/**
						 * [tAdvancedHash_row3 main ] stop
						 */

						/**
						 * [tAdvancedHash_row3 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row3";

						/**
						 * [tAdvancedHash_row3 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row3 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row3";

						/**
						 * [tAdvancedHash_row3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_6 process_data_end ] start
						 */

						currentComponent = "tDBInput_6";

						/**
						 * [tDBInput_6 process_data_end ] stop
						 */

						/**
						 * [tDBInput_6 end ] start
						 */

						currentComponent = "tDBInput_6";

					}
				} finally {
					if (rs_tDBInput_6 != null) {
						rs_tDBInput_6.close();
					}
					if (stmt_tDBInput_6 != null) {
						stmt_tDBInput_6.close();
					}
					if (conn_tDBInput_6 != null && !conn_tDBInput_6.isClosed()) {

						conn_tDBInput_6.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_6_NB_LINE", nb_line_tDBInput_6);

				ok_Hash.put("tDBInput_6", true);
				end_Hash.put("tDBInput_6", System.currentTimeMillis());

				/**
				 * [tDBInput_6 end ] stop
				 */

				/**
				 * [tAdvancedHash_row3 end ] start
				 */

				currentComponent = "tAdvancedHash_row3";

				tHash_Lookup_row3.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row3");
				}

				ok_Hash.put("tAdvancedHash_row3", true);
				end_Hash.put("tAdvancedHash_row3", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row3 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_6 finally ] start
				 */

				currentComponent = "tDBInput_6";

				/**
				 * [tDBInput_6 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row3 finally ] start
				 */

				currentComponent = "tAdvancedHash_row3";

				/**
				 * [tAdvancedHash_row3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements routines.system.IPersistableComparableLookupRow<row2Struct> {
		final static byte[] commonByteArrayLock_PROJET_SYNTHESE_Job_fact_table_sales = new byte[0];
		static byte[] commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int customerSK;

		public int getCustomerSK() {
			return this.customerSK;
		}

		public String customerNumber;

		public String getCustomerNumber() {
			return this.customerNumber;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.customerNumber == null) ? 0 : this.customerNumber.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.customerNumber == null) {
				if (other.customerNumber != null)
					return false;

			} else if (!this.customerNumber.equals(other.customerNumber))

				return false;

			return true;
		}

		public void copyDataTo(row2Struct other) {

			other.customerSK = this.customerSK;
			other.customerNumber = this.customerNumber;

		}

		public void copyKeysDataTo(row2Struct other) {

			other.customerNumber = this.customerNumber;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales.length) {
					if (length < 1024 && commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales.length == 0) {
						commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales = new byte[1024];
					} else {
						commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales, 0, length);
				strReturn = new String(commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales.length) {
					if (length < 1024 && commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales.length == 0) {
						commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales = new byte[1024];
					} else {
						commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales, 0, length);
				strReturn = new String(commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_SYNTHESE_Job_fact_table_sales) {

				try {

					int length = 0;

					this.customerNumber = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_PROJET_SYNTHESE_Job_fact_table_sales) {

				try {

					int length = 0;

					this.customerNumber = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.customerNumber, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.customerNumber, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.customerSK = dis.readInt();

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
			try {
				int length = 0;

				this.customerSK = objectIn.readInt();

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeInt(this.customerSK);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut) {
			try {

				objectOut.writeInt(this.customerSK);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}

		public boolean supportMarshaller() {
			return true;
		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("customerSK=" + String.valueOf(customerSK));
			sb.append(",customerNumber=" + customerNumber);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.customerNumber, other.customerNumber);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();

				/**
				 * [tAdvancedHash_row2 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row2", false);
				start_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tAdvancedHash_row2 = 0;

				// connection name:row2
				// source node:tDBInput_8 - inputs:(after_tDBInput_1) outputs:(row2,row2) |
				// target node:tAdvancedHash_row2 - inputs:(row2) outputs:()
				// linked node: tMap_4 - inputs:(row1,row4,row3,row2) outputs:(factsales)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row2Struct>getLookup(matchingModeEnum_row2);

				globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);

				/**
				 * [tAdvancedHash_row2 begin ] stop
				 */

				/**
				 * [tDBInput_8 begin ] start
				 */

				ok_Hash.put("tDBInput_8", false);
				start_Hash.put("tDBInput_8", System.currentTimeMillis());

				currentComponent = "tDBInput_8";

				int tos_count_tDBInput_8 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_8 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_8 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_8 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_8, talendToDBArray_tDBInput_8);
				int nb_line_tDBInput_8 = 0;
				java.sql.Connection conn_tDBInput_8 = null;
				String driverClass_tDBInput_8 = "net.sourceforge.jtds.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBInput_8 = java.lang.Class.forName(driverClass_tDBInput_8);
				String dbUser_tDBInput_8 = "sa";

				final String decryptedPassword_tDBInput_8 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:3lUpAUL39OJb2G4C3vfRPpyT2+btvVh6jj0f6wYVgQ==");

				String dbPwd_tDBInput_8 = decryptedPassword_tDBInput_8;

				String port_tDBInput_8 = "1433";
				String dbname_tDBInput_8 = "project_datawearhouse";
				String url_tDBInput_8 = "jdbc:jtds:sqlserver://" + "localhost";
				if (!"".equals(port_tDBInput_8)) {
					url_tDBInput_8 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBInput_8)) {
					url_tDBInput_8 += "//" + "project_datawearhouse";
				}
				url_tDBInput_8 += ";appName=" + projectName + ";" + "";
				String dbschema_tDBInput_8 = "dbo";

				conn_tDBInput_8 = java.sql.DriverManager.getConnection(url_tDBInput_8, dbUser_tDBInput_8,
						dbPwd_tDBInput_8);

				java.sql.Statement stmt_tDBInput_8 = conn_tDBInput_8.createStatement();

				String dbquery_tDBInput_8 = "SELECT dbo.customer_dim.customerSK,\n		dbo.customer_dim.customerNumber\nFROM	dbo.customer_dim";

				globalMap.put("tDBInput_8_QUERY", dbquery_tDBInput_8);
				java.sql.ResultSet rs_tDBInput_8 = null;

				try {
					rs_tDBInput_8 = stmt_tDBInput_8.executeQuery(dbquery_tDBInput_8);
					java.sql.ResultSetMetaData rsmd_tDBInput_8 = rs_tDBInput_8.getMetaData();
					int colQtyInRs_tDBInput_8 = rsmd_tDBInput_8.getColumnCount();

					String tmpContent_tDBInput_8 = null;

					while (rs_tDBInput_8.next()) {
						nb_line_tDBInput_8++;

						if (colQtyInRs_tDBInput_8 < 1) {
							row2.customerSK = 0;
						} else {

							row2.customerSK = rs_tDBInput_8.getInt(1);
							if (rs_tDBInput_8.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_8 < 2) {
							row2.customerNumber = null;
						} else {

							tmpContent_tDBInput_8 = rs_tDBInput_8.getString(2);
							if (tmpContent_tDBInput_8 != null) {
								if (talendToDBList_tDBInput_8.contains(
										rsmd_tDBInput_8.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
									row2.customerNumber = FormatterUtils.formatUnwithE(tmpContent_tDBInput_8);
								} else {
									row2.customerNumber = tmpContent_tDBInput_8;
								}
							} else {
								row2.customerNumber = null;
							}
						}

						/**
						 * [tDBInput_8 begin ] stop
						 */

						/**
						 * [tDBInput_8 main ] start
						 */

						currentComponent = "tDBInput_8";

						tos_count_tDBInput_8++;

						/**
						 * [tDBInput_8 main ] stop
						 */

						/**
						 * [tDBInput_8 process_data_begin ] start
						 */

						currentComponent = "tDBInput_8";

						/**
						 * [tDBInput_8 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row2 main ] start
						 */

						currentComponent = "tAdvancedHash_row2";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row2"

							);
						}

						row2Struct row2_HashRow = new row2Struct();

						row2_HashRow.customerSK = row2.customerSK;

						row2_HashRow.customerNumber = row2.customerNumber;

						tHash_Lookup_row2.put(row2_HashRow);

						tos_count_tAdvancedHash_row2++;

						/**
						 * [tAdvancedHash_row2 main ] stop
						 */

						/**
						 * [tAdvancedHash_row2 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row2";

						/**
						 * [tAdvancedHash_row2 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row2 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row2";

						/**
						 * [tAdvancedHash_row2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_8 process_data_end ] start
						 */

						currentComponent = "tDBInput_8";

						/**
						 * [tDBInput_8 process_data_end ] stop
						 */

						/**
						 * [tDBInput_8 end ] start
						 */

						currentComponent = "tDBInput_8";

					}
				} finally {
					if (rs_tDBInput_8 != null) {
						rs_tDBInput_8.close();
					}
					if (stmt_tDBInput_8 != null) {
						stmt_tDBInput_8.close();
					}
					if (conn_tDBInput_8 != null && !conn_tDBInput_8.isClosed()) {

						conn_tDBInput_8.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_8_NB_LINE", nb_line_tDBInput_8);

				ok_Hash.put("tDBInput_8", true);
				end_Hash.put("tDBInput_8", System.currentTimeMillis());

				/**
				 * [tDBInput_8 end ] stop
				 */

				/**
				 * [tAdvancedHash_row2 end ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				tHash_Lookup_row2.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tAdvancedHash_row2", true);
				end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row2 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_8 finally ] start
				 */

				currentComponent = "tDBInput_8";

				/**
				 * [tDBInput_8 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row2 finally ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				/**
				 * [tAdvancedHash_row2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_8_SUBPROCESS_STATE", 1);
	}

	public static class order_mssStruct implements routines.system.IPersistableComparableLookupRow<order_mssStruct> {
		final static byte[] commonByteArrayLock_PROJET_SYNTHESE_Job_fact_table_sales = new byte[0];
		static byte[] commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int OrderID;

		public int getOrderID() {
			return this.OrderID;
		}

		public String CustomerID;

		public String getCustomerID() {
			return this.CustomerID;
		}

		public Integer EmployeeID;

		public Integer getEmployeeID() {
			return this.EmployeeID;
		}

		public java.util.Date OrderDate;

		public java.util.Date getOrderDate() {
			return this.OrderDate;
		}

		public java.util.Date RequiredDate;

		public java.util.Date getRequiredDate() {
			return this.RequiredDate;
		}

		public java.util.Date ShippedDate;

		public java.util.Date getShippedDate() {
			return this.ShippedDate;
		}

		public Integer ShipVia;

		public Integer getShipVia() {
			return this.ShipVia;
		}

		public String ShipName;

		public String getShipName() {
			return this.ShipName;
		}

		public String ShipAddress;

		public String getShipAddress() {
			return this.ShipAddress;
		}

		public String ShipCity;

		public String getShipCity() {
			return this.ShipCity;
		}

		public String ShipRegion;

		public String getShipRegion() {
			return this.ShipRegion;
		}

		public String ShipPostalCode;

		public String getShipPostalCode() {
			return this.ShipPostalCode;
		}

		public String ShipCountry;

		public String getShipCountry() {
			return this.ShipCountry;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.OrderID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final order_mssStruct other = (order_mssStruct) obj;

			if (this.OrderID != other.OrderID)
				return false;

			return true;
		}

		public void copyDataTo(order_mssStruct other) {

			other.OrderID = this.OrderID;
			other.CustomerID = this.CustomerID;
			other.EmployeeID = this.EmployeeID;
			other.OrderDate = this.OrderDate;
			other.RequiredDate = this.RequiredDate;
			other.ShippedDate = this.ShippedDate;
			other.ShipVia = this.ShipVia;
			other.ShipName = this.ShipName;
			other.ShipAddress = this.ShipAddress;
			other.ShipCity = this.ShipCity;
			other.ShipRegion = this.ShipRegion;
			other.ShipPostalCode = this.ShipPostalCode;
			other.ShipCountry = this.ShipCountry;

		}

		public void copyKeysDataTo(order_mssStruct other) {

			other.OrderID = this.OrderID;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				unmarshaller.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller)
				throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = unmarshaller.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller)
				throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller)
				throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_SYNTHESE_Job_fact_table_sales) {

				try {

					int length = 0;

					this.OrderID = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_PROJET_SYNTHESE_Job_fact_table_sales) {

				try {

					int length = 0;

					this.OrderID = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.OrderID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
			try {

				// int

				dos.writeInt(this.OrderID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.CustomerID = readString(dis, ois);

				this.EmployeeID = readInteger(dis, ois);

				this.OrderDate = readDate(dis, ois);

				this.RequiredDate = readDate(dis, ois);

				this.ShippedDate = readDate(dis, ois);

				this.ShipVia = readInteger(dis, ois);

				this.ShipName = readString(dis, ois);

				this.ShipAddress = readString(dis, ois);

				this.ShipCity = readString(dis, ois);

				this.ShipRegion = readString(dis, ois);

				this.ShipPostalCode = readString(dis, ois);

				this.ShipCountry = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
			try {
				int length = 0;

				this.CustomerID = readString(dis, objectIn);

				this.EmployeeID = readInteger(dis, objectIn);

				this.OrderDate = readDate(dis, objectIn);

				this.RequiredDate = readDate(dis, objectIn);

				this.ShippedDate = readDate(dis, objectIn);

				this.ShipVia = readInteger(dis, objectIn);

				this.ShipName = readString(dis, objectIn);

				this.ShipAddress = readString(dis, objectIn);

				this.ShipCity = readString(dis, objectIn);

				this.ShipRegion = readString(dis, objectIn);

				this.ShipPostalCode = readString(dis, objectIn);

				this.ShipCountry = readString(dis, objectIn);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.CustomerID, dos, oos);

				writeInteger(this.EmployeeID, dos, oos);

				writeDate(this.OrderDate, dos, oos);

				writeDate(this.RequiredDate, dos, oos);

				writeDate(this.ShippedDate, dos, oos);

				writeInteger(this.ShipVia, dos, oos);

				writeString(this.ShipName, dos, oos);

				writeString(this.ShipAddress, dos, oos);

				writeString(this.ShipCity, dos, oos);

				writeString(this.ShipRegion, dos, oos);

				writeString(this.ShipPostalCode, dos, oos);

				writeString(this.ShipCountry, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut) {
			try {

				writeString(this.CustomerID, dos, objectOut);

				writeInteger(this.EmployeeID, dos, objectOut);

				writeDate(this.OrderDate, dos, objectOut);

				writeDate(this.RequiredDate, dos, objectOut);

				writeDate(this.ShippedDate, dos, objectOut);

				writeInteger(this.ShipVia, dos, objectOut);

				writeString(this.ShipName, dos, objectOut);

				writeString(this.ShipAddress, dos, objectOut);

				writeString(this.ShipCity, dos, objectOut);

				writeString(this.ShipRegion, dos, objectOut);

				writeString(this.ShipPostalCode, dos, objectOut);

				writeString(this.ShipCountry, dos, objectOut);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}

		public boolean supportMarshaller() {
			return true;
		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrderID=" + String.valueOf(OrderID));
			sb.append(",CustomerID=" + CustomerID);
			sb.append(",EmployeeID=" + String.valueOf(EmployeeID));
			sb.append(",OrderDate=" + String.valueOf(OrderDate));
			sb.append(",RequiredDate=" + String.valueOf(RequiredDate));
			sb.append(",ShippedDate=" + String.valueOf(ShippedDate));
			sb.append(",ShipVia=" + String.valueOf(ShipVia));
			sb.append(",ShipName=" + ShipName);
			sb.append(",ShipAddress=" + ShipAddress);
			sb.append(",ShipCity=" + ShipCity);
			sb.append(",ShipRegion=" + ShipRegion);
			sb.append(",ShipPostalCode=" + ShipPostalCode);
			sb.append(",ShipCountry=" + ShipCountry);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(order_mssStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.OrderID, other.OrderID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_9_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				order_mssStruct order_mss = new order_mssStruct();

				/**
				 * [tAdvancedHash_order_mss begin ] start
				 */

				ok_Hash.put("tAdvancedHash_order_mss", false);
				start_Hash.put("tAdvancedHash_order_mss", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_order_mss";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "order_mss");
				}

				int tos_count_tAdvancedHash_order_mss = 0;

				// connection name:order_mss
				// source node:tDBInput_9 - inputs:(after_tDBInput_7)
				// outputs:(order_mss,order_mss) | target node:tAdvancedHash_order_mss -
				// inputs:(order_mss) outputs:()
				// linked node: tMap_2 - inputs:(order_det_mss,order_mss) outputs:(measure_mss)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_order_mss = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<order_mssStruct> tHash_Lookup_order_mss = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<order_mssStruct>getLookup(matchingModeEnum_order_mss);

				globalMap.put("tHash_Lookup_order_mss", tHash_Lookup_order_mss);

				/**
				 * [tAdvancedHash_order_mss begin ] stop
				 */

				/**
				 * [tDBInput_9 begin ] start
				 */

				ok_Hash.put("tDBInput_9", false);
				start_Hash.put("tDBInput_9", System.currentTimeMillis());

				currentComponent = "tDBInput_9";

				int tos_count_tDBInput_9 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_9 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_9 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_9 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_9, talendToDBArray_tDBInput_9);
				int nb_line_tDBInput_9 = 0;
				java.sql.Connection conn_tDBInput_9 = null;
				String driverClass_tDBInput_9 = "net.sourceforge.jtds.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBInput_9 = java.lang.Class.forName(driverClass_tDBInput_9);
				String dbUser_tDBInput_9 = "sa";

				final String decryptedPassword_tDBInput_9 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:tI59SUF6nDjlb50Qrwmv2VIGR91HKWkiCotGGk6a5Q==");

				String dbPwd_tDBInput_9 = decryptedPassword_tDBInput_9;

				String port_tDBInput_9 = "1433";
				String dbname_tDBInput_9 = "NORTHWND";
				String url_tDBInput_9 = "jdbc:jtds:sqlserver://" + "localhost";
				if (!"".equals(port_tDBInput_9)) {
					url_tDBInput_9 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBInput_9)) {
					url_tDBInput_9 += "//" + "NORTHWND";
				}
				url_tDBInput_9 += ";appName=" + projectName + ";" + "";
				String dbschema_tDBInput_9 = "dbo";

				conn_tDBInput_9 = java.sql.DriverManager.getConnection(url_tDBInput_9, dbUser_tDBInput_9,
						dbPwd_tDBInput_9);

				java.sql.Statement stmt_tDBInput_9 = conn_tDBInput_9.createStatement();

				String dbquery_tDBInput_9 = "SELECT dbo.Orders.OrderID,\n		dbo.Orders.CustomerID,\n		dbo.Orders.EmployeeID,\n		dbo.Orders.OrderDate,\n		dbo.Orders.Requi"
						+ "redDate,\n		dbo.Orders.ShippedDate,\n		dbo.Orders.ShipVia,\n		dbo.Orders.Freight,\n		dbo.Orders.ShipName,\n		dbo.Orders.ShipA"
						+ "ddress,\n		dbo.Orders.ShipCity,\n		dbo.Orders.ShipRegion,\n		dbo.Orders.ShipPostalCode,\n		dbo.Orders.ShipCountry\nFROM	dbo.O"
						+ "rders";

				globalMap.put("tDBInput_9_QUERY", dbquery_tDBInput_9);
				java.sql.ResultSet rs_tDBInput_9 = null;

				try {
					rs_tDBInput_9 = stmt_tDBInput_9.executeQuery(dbquery_tDBInput_9);
					java.sql.ResultSetMetaData rsmd_tDBInput_9 = rs_tDBInput_9.getMetaData();
					int colQtyInRs_tDBInput_9 = rsmd_tDBInput_9.getColumnCount();

					String tmpContent_tDBInput_9 = null;

					while (rs_tDBInput_9.next()) {
						nb_line_tDBInput_9++;

						if (colQtyInRs_tDBInput_9 < 1) {
							order_mss.OrderID = 0;
						} else {

							order_mss.OrderID = rs_tDBInput_9.getInt(1);
							if (rs_tDBInput_9.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_9 < 2) {
							order_mss.CustomerID = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(2);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
									order_mss.CustomerID = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									order_mss.CustomerID = tmpContent_tDBInput_9;
								}
							} else {
								order_mss.CustomerID = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 3) {
							order_mss.EmployeeID = null;
						} else {

							order_mss.EmployeeID = rs_tDBInput_9.getInt(3);
							if (rs_tDBInput_9.wasNull()) {
								order_mss.EmployeeID = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 4) {
							order_mss.OrderDate = null;
						} else {

							order_mss.OrderDate = mssqlGTU_tDBInput_9.getDate(rsmd_tDBInput_9, rs_tDBInput_9, 4);

						}
						if (colQtyInRs_tDBInput_9 < 5) {
							order_mss.RequiredDate = null;
						} else {

							order_mss.RequiredDate = mssqlGTU_tDBInput_9.getDate(rsmd_tDBInput_9, rs_tDBInput_9, 5);

						}
						if (colQtyInRs_tDBInput_9 < 6) {
							order_mss.ShippedDate = null;
						} else {

							order_mss.ShippedDate = mssqlGTU_tDBInput_9.getDate(rsmd_tDBInput_9, rs_tDBInput_9, 6);

						}
						if (colQtyInRs_tDBInput_9 < 7) {
							order_mss.ShipVia = null;
						} else {

							order_mss.ShipVia = rs_tDBInput_9.getInt(7);
							if (rs_tDBInput_9.wasNull()) {
								order_mss.ShipVia = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 8) {
							order_mss.ShipName = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(8);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(8).toUpperCase(java.util.Locale.ENGLISH))) {
									order_mss.ShipName = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									order_mss.ShipName = tmpContent_tDBInput_9;
								}
							} else {
								order_mss.ShipName = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 9) {
							order_mss.ShipAddress = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(9);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(9).toUpperCase(java.util.Locale.ENGLISH))) {
									order_mss.ShipAddress = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									order_mss.ShipAddress = tmpContent_tDBInput_9;
								}
							} else {
								order_mss.ShipAddress = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 10) {
							order_mss.ShipCity = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(10);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(10).toUpperCase(java.util.Locale.ENGLISH))) {
									order_mss.ShipCity = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									order_mss.ShipCity = tmpContent_tDBInput_9;
								}
							} else {
								order_mss.ShipCity = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 11) {
							order_mss.ShipRegion = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(11);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(11).toUpperCase(java.util.Locale.ENGLISH))) {
									order_mss.ShipRegion = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									order_mss.ShipRegion = tmpContent_tDBInput_9;
								}
							} else {
								order_mss.ShipRegion = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 12) {
							order_mss.ShipPostalCode = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(12);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(12).toUpperCase(java.util.Locale.ENGLISH))) {
									order_mss.ShipPostalCode = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									order_mss.ShipPostalCode = tmpContent_tDBInput_9;
								}
							} else {
								order_mss.ShipPostalCode = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 13) {
							order_mss.ShipCountry = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(13);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(13).toUpperCase(java.util.Locale.ENGLISH))) {
									order_mss.ShipCountry = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									order_mss.ShipCountry = tmpContent_tDBInput_9;
								}
							} else {
								order_mss.ShipCountry = null;
							}
						}

						/**
						 * [tDBInput_9 begin ] stop
						 */

						/**
						 * [tDBInput_9 main ] start
						 */

						currentComponent = "tDBInput_9";

						tos_count_tDBInput_9++;

						/**
						 * [tDBInput_9 main ] stop
						 */

						/**
						 * [tDBInput_9 process_data_begin ] start
						 */

						currentComponent = "tDBInput_9";

						/**
						 * [tDBInput_9 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_order_mss main ] start
						 */

						currentComponent = "tAdvancedHash_order_mss";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "order_mss"

							);
						}

						order_mssStruct order_mss_HashRow = new order_mssStruct();

						order_mss_HashRow.OrderID = order_mss.OrderID;

						order_mss_HashRow.CustomerID = order_mss.CustomerID;

						order_mss_HashRow.EmployeeID = order_mss.EmployeeID;

						order_mss_HashRow.OrderDate = order_mss.OrderDate;

						order_mss_HashRow.RequiredDate = order_mss.RequiredDate;

						order_mss_HashRow.ShippedDate = order_mss.ShippedDate;

						order_mss_HashRow.ShipVia = order_mss.ShipVia;

						order_mss_HashRow.ShipName = order_mss.ShipName;

						order_mss_HashRow.ShipAddress = order_mss.ShipAddress;

						order_mss_HashRow.ShipCity = order_mss.ShipCity;

						order_mss_HashRow.ShipRegion = order_mss.ShipRegion;

						order_mss_HashRow.ShipPostalCode = order_mss.ShipPostalCode;

						order_mss_HashRow.ShipCountry = order_mss.ShipCountry;

						tHash_Lookup_order_mss.put(order_mss_HashRow);

						tos_count_tAdvancedHash_order_mss++;

						/**
						 * [tAdvancedHash_order_mss main ] stop
						 */

						/**
						 * [tAdvancedHash_order_mss process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_order_mss";

						/**
						 * [tAdvancedHash_order_mss process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_order_mss process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_order_mss";

						/**
						 * [tAdvancedHash_order_mss process_data_end ] stop
						 */

						/**
						 * [tDBInput_9 process_data_end ] start
						 */

						currentComponent = "tDBInput_9";

						/**
						 * [tDBInput_9 process_data_end ] stop
						 */

						/**
						 * [tDBInput_9 end ] start
						 */

						currentComponent = "tDBInput_9";

					}
				} finally {
					if (rs_tDBInput_9 != null) {
						rs_tDBInput_9.close();
					}
					if (stmt_tDBInput_9 != null) {
						stmt_tDBInput_9.close();
					}
					if (conn_tDBInput_9 != null && !conn_tDBInput_9.isClosed()) {

						conn_tDBInput_9.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_9_NB_LINE", nb_line_tDBInput_9);

				ok_Hash.put("tDBInput_9", true);
				end_Hash.put("tDBInput_9", System.currentTimeMillis());

				/**
				 * [tDBInput_9 end ] stop
				 */

				/**
				 * [tAdvancedHash_order_mss end ] start
				 */

				currentComponent = "tAdvancedHash_order_mss";

				tHash_Lookup_order_mss.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "order_mss");
				}

				ok_Hash.put("tAdvancedHash_order_mss", true);
				end_Hash.put("tAdvancedHash_order_mss", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_order_mss end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_9 finally ] start
				 */

				currentComponent = "tDBInput_9";

				/**
				 * [tDBInput_9 finally ] stop
				 */

				/**
				 * [tAdvancedHash_order_mss finally ] start
				 */

				currentComponent = "tAdvancedHash_order_mss";

				/**
				 * [tAdvancedHash_order_mss finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_9_SUBPROCESS_STATE", 1);
	}

	public static class order_mysStruct implements routines.system.IPersistableComparableLookupRow<order_mysStruct> {
		final static byte[] commonByteArrayLock_PROJET_SYNTHESE_Job_fact_table_sales = new byte[0];
		static byte[] commonByteArray_PROJET_SYNTHESE_Job_fact_table_sales = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int orderNumber;

		public int getOrderNumber() {
			return this.orderNumber;
		}

		public java.util.Date orderDate;

		public java.util.Date getOrderDate() {
			return this.orderDate;
		}

		public java.util.Date requiredDate;

		public java.util.Date getRequiredDate() {
			return this.requiredDate;
		}

		public java.util.Date shippedDate;

		public java.util.Date getShippedDate() {
			return this.shippedDate;
		}

		public String status;

		public String getStatus() {
			return this.status;
		}

		public String comments;

		public String getComments() {
			return this.comments;
		}

		public int customerNumber;

		public int getCustomerNumber() {
			return this.customerNumber;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.orderNumber;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final order_mysStruct other = (order_mysStruct) obj;

			if (this.orderNumber != other.orderNumber)
				return false;

			return true;
		}

		public void copyDataTo(order_mysStruct other) {

			other.orderNumber = this.orderNumber;
			other.orderDate = this.orderDate;
			other.requiredDate = this.requiredDate;
			other.shippedDate = this.shippedDate;
			other.status = this.status;
			other.comments = this.comments;
			other.customerNumber = this.customerNumber;

		}

		public void copyKeysDataTo(order_mysStruct other) {

			other.orderNumber = this.orderNumber;

		}

		private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller)
				throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				unmarshaller.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller)
				throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_SYNTHESE_Job_fact_table_sales) {

				try {

					int length = 0;

					this.orderNumber = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_PROJET_SYNTHESE_Job_fact_table_sales) {

				try {

					int length = 0;

					this.orderNumber = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.orderNumber);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
			try {

				// int

				dos.writeInt(this.orderNumber);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.orderDate = readDate(dis, ois);

				this.requiredDate = readDate(dis, ois);

				this.shippedDate = readDate(dis, ois);

				this.status = readString(dis, ois);

				this.comments = readString(dis, ois);

				this.customerNumber = dis.readInt();

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
			try {
				int length = 0;

				this.orderDate = readDate(dis, objectIn);

				this.requiredDate = readDate(dis, objectIn);

				this.shippedDate = readDate(dis, objectIn);

				this.status = readString(dis, objectIn);

				this.comments = readString(dis, objectIn);

				this.customerNumber = objectIn.readInt();

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeDate(this.orderDate, dos, oos);

				writeDate(this.requiredDate, dos, oos);

				writeDate(this.shippedDate, dos, oos);

				writeString(this.status, dos, oos);

				writeString(this.comments, dos, oos);

				dos.writeInt(this.customerNumber);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut) {
			try {

				writeDate(this.orderDate, dos, objectOut);

				writeDate(this.requiredDate, dos, objectOut);

				writeDate(this.shippedDate, dos, objectOut);

				writeString(this.status, dos, objectOut);

				writeString(this.comments, dos, objectOut);

				objectOut.writeInt(this.customerNumber);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}

		public boolean supportMarshaller() {
			return true;
		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("orderNumber=" + String.valueOf(orderNumber));
			sb.append(",orderDate=" + String.valueOf(orderDate));
			sb.append(",requiredDate=" + String.valueOf(requiredDate));
			sb.append(",shippedDate=" + String.valueOf(shippedDate));
			sb.append(",status=" + status);
			sb.append(",comments=" + comments);
			sb.append(",customerNumber=" + String.valueOf(customerNumber));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(order_mysStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.orderNumber, other.orderNumber);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_11_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				order_mysStruct order_mys = new order_mysStruct();

				/**
				 * [tAdvancedHash_order_mys begin ] start
				 */

				ok_Hash.put("tAdvancedHash_order_mys", false);
				start_Hash.put("tAdvancedHash_order_mys", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_order_mys";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "order_mys");
				}

				int tos_count_tAdvancedHash_order_mys = 0;

				// connection name:order_mys
				// source node:tDBInput_11 - inputs:(after_tDBInput_4)
				// outputs:(order_mys,order_mys) | target node:tAdvancedHash_order_mys -
				// inputs:(order_mys) outputs:()
				// linked node: tMap_3 - inputs:(order_det_mys,order_mys) outputs:(measure_mys)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_order_mys = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<order_mysStruct> tHash_Lookup_order_mys = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<order_mysStruct>getLookup(matchingModeEnum_order_mys);

				globalMap.put("tHash_Lookup_order_mys", tHash_Lookup_order_mys);

				/**
				 * [tAdvancedHash_order_mys begin ] stop
				 */

				/**
				 * [tDBInput_11 begin ] start
				 */

				ok_Hash.put("tDBInput_11", false);
				start_Hash.put("tDBInput_11", System.currentTimeMillis());

				currentComponent = "tDBInput_11";

				int tos_count_tDBInput_11 = 0;

				java.util.Calendar calendar_tDBInput_11 = java.util.Calendar.getInstance();
				calendar_tDBInput_11.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_11 = calendar_tDBInput_11.getTime();
				int nb_line_tDBInput_11 = 0;
				java.sql.Connection conn_tDBInput_11 = null;
				String driverClass_tDBInput_11 = "com.mysql.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBInput_11 = java.lang.Class.forName(driverClass_tDBInput_11);
				String dbUser_tDBInput_11 = "root";

				final String decryptedPassword_tDBInput_11 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:T/wtKfjeBvEqP8Rbk+K/w2ZXviopC93rPr5wn1NanggU5FOuizIGpg==");

				String dbPwd_tDBInput_11 = decryptedPassword_tDBInput_11;

				String properties_tDBInput_11 = "noDatetimeStringSync=true&enabledTLSProtocols=TLSv1.2,TLSv1.1,TLSv1";
				if (properties_tDBInput_11 == null || properties_tDBInput_11.trim().length() == 0) {
					properties_tDBInput_11 = "";
				}
				String url_tDBInput_11 = "jdbc:mysql://" + "localhost" + ":" + "3307" + "/" + "sales" + "?"
						+ properties_tDBInput_11;

				conn_tDBInput_11 = java.sql.DriverManager.getConnection(url_tDBInput_11, dbUser_tDBInput_11,
						dbPwd_tDBInput_11);

				java.sql.Statement stmt_tDBInput_11 = conn_tDBInput_11.createStatement();

				String dbquery_tDBInput_11 = "SELECT \n  `orders`.`orderNumber`, \n  `orders`.`orderDate`, \n  `orders`.`requiredDate`, \n  `orders`.`shippedDate`, \n  `o"
						+ "rders`.`status`, \n  `orders`.`comments`, \n  `orders`.`customerNumber`\nFROM `orders`";

				globalMap.put("tDBInput_11_QUERY", dbquery_tDBInput_11);
				java.sql.ResultSet rs_tDBInput_11 = null;

				try {
					rs_tDBInput_11 = stmt_tDBInput_11.executeQuery(dbquery_tDBInput_11);
					java.sql.ResultSetMetaData rsmd_tDBInput_11 = rs_tDBInput_11.getMetaData();
					int colQtyInRs_tDBInput_11 = rsmd_tDBInput_11.getColumnCount();

					String tmpContent_tDBInput_11 = null;

					while (rs_tDBInput_11.next()) {
						nb_line_tDBInput_11++;

						if (colQtyInRs_tDBInput_11 < 1) {
							order_mys.orderNumber = 0;
						} else {

							order_mys.orderNumber = rs_tDBInput_11.getInt(1);
							if (rs_tDBInput_11.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_11 < 2) {
							order_mys.orderDate = null;
						} else {

							if (rs_tDBInput_11.getString(2) != null) {
								String dateString_tDBInput_11 = rs_tDBInput_11.getString(2);
								if (!("0000-00-00").equals(dateString_tDBInput_11)
										&& !("0000-00-00 00:00:00").equals(dateString_tDBInput_11)) {
									order_mys.orderDate = rs_tDBInput_11.getTimestamp(2);
								} else {
									order_mys.orderDate = (java.util.Date) year0_tDBInput_11.clone();
								}
							} else {
								order_mys.orderDate = null;
							}
						}
						if (colQtyInRs_tDBInput_11 < 3) {
							order_mys.requiredDate = null;
						} else {

							if (rs_tDBInput_11.getString(3) != null) {
								String dateString_tDBInput_11 = rs_tDBInput_11.getString(3);
								if (!("0000-00-00").equals(dateString_tDBInput_11)
										&& !("0000-00-00 00:00:00").equals(dateString_tDBInput_11)) {
									order_mys.requiredDate = rs_tDBInput_11.getTimestamp(3);
								} else {
									order_mys.requiredDate = (java.util.Date) year0_tDBInput_11.clone();
								}
							} else {
								order_mys.requiredDate = null;
							}
						}
						if (colQtyInRs_tDBInput_11 < 4) {
							order_mys.shippedDate = null;
						} else {

							if (rs_tDBInput_11.getString(4) != null) {
								String dateString_tDBInput_11 = rs_tDBInput_11.getString(4);
								if (!("0000-00-00").equals(dateString_tDBInput_11)
										&& !("0000-00-00 00:00:00").equals(dateString_tDBInput_11)) {
									order_mys.shippedDate = rs_tDBInput_11.getTimestamp(4);
								} else {
									order_mys.shippedDate = (java.util.Date) year0_tDBInput_11.clone();
								}
							} else {
								order_mys.shippedDate = null;
							}
						}
						if (colQtyInRs_tDBInput_11 < 5) {
							order_mys.status = null;
						} else {

							order_mys.status = routines.system.JDBCUtil.getString(rs_tDBInput_11, 5, false);
						}
						if (colQtyInRs_tDBInput_11 < 6) {
							order_mys.comments = null;
						} else {

							order_mys.comments = routines.system.JDBCUtil.getString(rs_tDBInput_11, 6, false);
						}
						if (colQtyInRs_tDBInput_11 < 7) {
							order_mys.customerNumber = 0;
						} else {

							order_mys.customerNumber = rs_tDBInput_11.getInt(7);
							if (rs_tDBInput_11.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}

						/**
						 * [tDBInput_11 begin ] stop
						 */

						/**
						 * [tDBInput_11 main ] start
						 */

						currentComponent = "tDBInput_11";

						tos_count_tDBInput_11++;

						/**
						 * [tDBInput_11 main ] stop
						 */

						/**
						 * [tDBInput_11 process_data_begin ] start
						 */

						currentComponent = "tDBInput_11";

						/**
						 * [tDBInput_11 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_order_mys main ] start
						 */

						currentComponent = "tAdvancedHash_order_mys";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "order_mys"

							);
						}

						order_mysStruct order_mys_HashRow = new order_mysStruct();

						order_mys_HashRow.orderNumber = order_mys.orderNumber;

						order_mys_HashRow.orderDate = order_mys.orderDate;

						order_mys_HashRow.requiredDate = order_mys.requiredDate;

						order_mys_HashRow.shippedDate = order_mys.shippedDate;

						order_mys_HashRow.status = order_mys.status;

						order_mys_HashRow.comments = order_mys.comments;

						order_mys_HashRow.customerNumber = order_mys.customerNumber;

						tHash_Lookup_order_mys.put(order_mys_HashRow);

						tos_count_tAdvancedHash_order_mys++;

						/**
						 * [tAdvancedHash_order_mys main ] stop
						 */

						/**
						 * [tAdvancedHash_order_mys process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_order_mys";

						/**
						 * [tAdvancedHash_order_mys process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_order_mys process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_order_mys";

						/**
						 * [tAdvancedHash_order_mys process_data_end ] stop
						 */

						/**
						 * [tDBInput_11 process_data_end ] start
						 */

						currentComponent = "tDBInput_11";

						/**
						 * [tDBInput_11 process_data_end ] stop
						 */

						/**
						 * [tDBInput_11 end ] start
						 */

						currentComponent = "tDBInput_11";

					}
				} finally {
					if (rs_tDBInput_11 != null) {
						rs_tDBInput_11.close();
					}
					if (stmt_tDBInput_11 != null) {
						stmt_tDBInput_11.close();
					}
					if (conn_tDBInput_11 != null && !conn_tDBInput_11.isClosed()) {

						conn_tDBInput_11.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}

				globalMap.put("tDBInput_11_NB_LINE", nb_line_tDBInput_11);

				ok_Hash.put("tDBInput_11", true);
				end_Hash.put("tDBInput_11", System.currentTimeMillis());

				/**
				 * [tDBInput_11 end ] stop
				 */

				/**
				 * [tAdvancedHash_order_mys end ] start
				 */

				currentComponent = "tAdvancedHash_order_mys";

				tHash_Lookup_order_mys.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "order_mys");
				}

				ok_Hash.put("tAdvancedHash_order_mys", true);
				end_Hash.put("tAdvancedHash_order_mys", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_order_mys end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_11 finally ] start
				 */

				currentComponent = "tDBInput_11";

				/**
				 * [tDBInput_11 finally ] stop
				 */

				/**
				 * [tAdvancedHash_order_mys finally ] start
				 */

				currentComponent = "tAdvancedHash_order_mys";

				/**
				 * [tAdvancedHash_order_mys finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_11_SUBPROCESS_STATE", 1);
	}

	public void tDBOutput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBOutput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System.currentTimeMillis());

				currentComponent = "tDBOutput_1";

				int tos_count_tDBOutput_1 = 0;

				int nb_line_tDBOutput_1 = 0;
				int nb_line_update_tDBOutput_1 = 0;
				int nb_line_inserted_tDBOutput_1 = 0;
				int nb_line_deleted_tDBOutput_1 = 0;
				int nb_line_rejected_tDBOutput_1 = 0;

				int deletedCount_tDBOutput_1 = 0;
				int updatedCount_tDBOutput_1 = 0;
				int insertedCount_tDBOutput_1 = 0;
				int rowsToCommitCount_tDBOutput_1 = 0;
				int rejectedCount_tDBOutput_1 = 0;
				String dbschema_tDBOutput_1 = null;
				String tableName_tDBOutput_1 = null;
				boolean whetherReject_tDBOutput_1 = false;

				java.util.Calendar calendar_tDBOutput_1 = java.util.Calendar.getInstance();
				long year1_tDBOutput_1 = TalendDate.parseDate("yyyy-MM-dd", "0001-01-01").getTime();
				long year2_tDBOutput_1 = TalendDate.parseDate("yyyy-MM-dd", "1753-01-01").getTime();
				long year10000_tDBOutput_1 = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss", "9999-12-31 24:00:00")
						.getTime();
				long date_tDBOutput_1;

				java.util.Calendar calendar_datetimeoffset_tDBOutput_1 = java.util.Calendar
						.getInstance(java.util.TimeZone.getTimeZone("UTC"));

				java.sql.Connection conn_tDBOutput_1 = null;
				String dbUser_tDBOutput_1 = null;
				dbschema_tDBOutput_1 = "dbo";
				String driverClass_tDBOutput_1 = "net.sourceforge.jtds.jdbc.Driver";

				java.lang.Class.forName(driverClass_tDBOutput_1);
				String port_tDBOutput_1 = "1433";
				String dbname_tDBOutput_1 = "project_datawearhouse";
				String url_tDBOutput_1 = "jdbc:jtds:sqlserver://" + "localhost";
				if (!"".equals(port_tDBOutput_1)) {
					url_tDBOutput_1 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBOutput_1)) {
					url_tDBOutput_1 += "//" + "project_datawearhouse";

				}
				url_tDBOutput_1 += ";appName=" + projectName + ";" + "";
				dbUser_tDBOutput_1 = "sa";

				final String decryptedPassword_tDBOutput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:AjBF3dfucEr6af8NYmVcB8nXHpHuFfEIZt4SDPa9iw==");

				String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;
				conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1, dbUser_tDBOutput_1,
						dbPwd_tDBOutput_1);

				resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);

				conn_tDBOutput_1.setAutoCommit(false);
				int commitEvery_tDBOutput_1 = 10000;
				int commitCounter_tDBOutput_1 = 0;

				int batchSize_tDBOutput_1 = 10000;
				int batchSizeCounter_tDBOutput_1 = 0;

				if (dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
					tableName_tDBOutput_1 = "FactSalesTable";
				} else {
					tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "].[" + "FactSalesTable";
				}
				int count_tDBOutput_1 = 0;

				boolean whetherExist_tDBOutput_1 = false;
				try (java.sql.Statement isExistStmt_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
					try {
						isExistStmt_tDBOutput_1.execute("SELECT TOP 1 1 FROM [" + tableName_tDBOutput_1 + "]");
						whetherExist_tDBOutput_1 = true;
					} catch (java.lang.Exception e) {
						globalMap.put("tDBOutput_1_ERROR_MESSAGE", e.getMessage());
						whetherExist_tDBOutput_1 = false;
					}
				}
				if (whetherExist_tDBOutput_1) {
					try (java.sql.Statement stmtDrop_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
						stmtDrop_tDBOutput_1.execute("DROP TABLE [" + tableName_tDBOutput_1 + "]");
					}
				}
				try (java.sql.Statement stmtCreate_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
					stmtCreate_tDBOutput_1.execute("CREATE TABLE [" + tableName_tDBOutput_1
							+ "]([dateID] INT  not null ,[produitSK] INT  not null ,[customerSK] INT  not null ,[saleAmount] DECIMAL(38,4)  ,[quantity] NUMERIC(20,4)  ,primary key([dateID],[produitSK],[customerSK]))");
				}
				String insert_tDBOutput_1 = "INSERT INTO [" + tableName_tDBOutput_1
						+ "] ([dateID],[produitSK],[customerSK],[saleAmount],[quantity]) VALUES (?,?,?,?,?)";
				java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
				resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tDBOutput_1 main ] start
				 */

				currentComponent = "tDBOutput_1";

				tos_count_tDBOutput_1++;

				/**
				 * [tDBOutput_1 main ] stop
				 */

				/**
				 * [tDBOutput_1 process_data_begin ] start
				 */

				currentComponent = "tDBOutput_1";

				/**
				 * [tDBOutput_1 process_data_begin ] stop
				 */

				/**
				 * [tDBOutput_1 process_data_end ] start
				 */

				currentComponent = "tDBOutput_1";

				/**
				 * [tDBOutput_1 process_data_end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					int countSum_tDBOutput_1 = 0;
					if (pstmt_tDBOutput_1 != null && batchSizeCounter_tDBOutput_1 > 0) {

						for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
							if (countEach_tDBOutput_1 == -2 || countEach_tDBOutput_1 == -3) {
								break;
							}
							countSum_tDBOutput_1 += countEach_tDBOutput_1;
						}
						rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;

					}

					insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

				} catch (java.sql.BatchUpdateException e) {
					globalMap.put("tDBOutput_1_ERROR_MESSAGE", e.getMessage());

					int countSum_tDBOutput_1 = 0;
					for (int countEach_tDBOutput_1 : e.getUpdateCounts()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
					rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;

					insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

					System.err.println(e.getMessage());

				}
				if (pstmt_tDBOutput_1 != null) {

					pstmt_tDBOutput_1.close();
					resourceMap.remove("pstmt_tDBOutput_1");

				}
				resourceMap.put("statementClosed_tDBOutput_1", true);
				if (rowsToCommitCount_tDBOutput_1 != 0) {

				}
				conn_tDBOutput_1.commit();
				if (rowsToCommitCount_tDBOutput_1 != 0) {

					rowsToCommitCount_tDBOutput_1 = 0;
				}
				commitCounter_tDBOutput_1 = 0;
				conn_tDBOutput_1.close();
				resourceMap.put("finish_tDBOutput_1", true);

				nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1 + deletedCount_tDBOutput_1;
				nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
				nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
				nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;

				globalMap.put("tDBOutput_1_NB_LINE", nb_line_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_UPDATED", nb_line_update_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_DELETED", nb_line_deleted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				/**
				 * [tDBOutput_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
						if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_1")) != null) {
							pstmtToClose_tDBOutput_1.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_1") == null) {
						java.sql.Connection ctn_tDBOutput_1 = null;
						if ((ctn_tDBOutput_1 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_1")) != null) {
							try {
								ctn_tDBOutput_1.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_1) {
								String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :"
										+ sqlEx_tDBOutput_1.getMessage();
								System.err.println(errorMessage_tDBOutput_1);
							}
						}
					}
				}

				/**
				 * [tDBOutput_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBOutput_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	protected PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final Job_fact_table_sales Job_fact_table_salesClass = new Job_fact_table_sales();

		int exitCode = Job_fact_table_salesClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}
		boolean inOSGi = routines.system.BundleUtils.inOSGi();

		if (inOSGi) {
			java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

			if (jobProperties != null && jobProperties.get("context") != null) {
				contextStr = (String) jobProperties.get("context");
			}
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = Job_fact_table_sales.class.getClassLoader().getResourceAsStream(
					"projet_synthese/job_fact_table_sales_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = Job_fact_table_sales.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				try {
					// defaultProps is in order to keep the original context value
					if (context != null && context.isEmpty()) {
						defaultProps.load(inContext);
						context = new ContextProperties(defaultProps);
					}
				} finally {
					inContext.close();
				}
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tDBInput_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_1) {
			globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

			e_tDBInput_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println(
					(endUsedMemory - startUsedMemory) + " bytes memory increase when running : Job_fact_table_sales");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;

		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 335839 characters generated by Talend Open Studio for Big Data on the 9 juin
 * 2024, 00:45:06 WEST
 ************************************************************************************************/